// Code generated by entc, DO NOT EDIT.

package checkout

const (
	// Label holds the string label denoting the checkout type in the database.
	Label = "checkout"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCheckoutDate holds the string denoting the checkout_date field in the database.
	FieldCheckoutDate = "checkout_date"
	// FieldIdentityCard holds the string denoting the identity_card field in the database.
	FieldIdentityCard = "identity_card"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"

	// EdgeStatuss holds the string denoting the statuss edge name in mutations.
	EdgeStatuss = "statuss"
	// EdgeStatusopinion holds the string denoting the statusopinion edge name in mutations.
	EdgeStatusopinion = "statusopinion"
	// EdgeCounterstaffs holds the string denoting the counterstaffs edge name in mutations.
	EdgeCounterstaffs = "counterstaffs"
	// EdgeCheckins holds the string denoting the checkins edge name in mutations.
	EdgeCheckins = "checkins"

	// Table holds the table name of the checkout in the database.
	Table = "checkouts"
	// StatussTable is the table the holds the statuss relation/edge.
	StatussTable = "checkouts"
	// StatussInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	StatussInverseTable = "status"
	// StatussColumn is the table column denoting the statuss relation/edge.
	StatussColumn = "status_checkouts"
	// StatusopinionTable is the table the holds the statusopinion relation/edge.
	StatusopinionTable = "checkouts"
	// StatusopinionInverseTable is the table name for the StatusOpinion entity.
	// It exists in this package in order to avoid circular dependency with the "statusopinion" package.
	StatusopinionInverseTable = "status_opinions"
	// StatusopinionColumn is the table column denoting the statusopinion relation/edge.
	StatusopinionColumn = "status_opinion_checkouts"
	// CounterstaffsTable is the table the holds the counterstaffs relation/edge.
	CounterstaffsTable = "checkouts"
	// CounterstaffsInverseTable is the table name for the CounterStaff entity.
	// It exists in this package in order to avoid circular dependency with the "counterstaff" package.
	CounterstaffsInverseTable = "counter_staffs"
	// CounterstaffsColumn is the table column denoting the counterstaffs relation/edge.
	CounterstaffsColumn = "staff_id"
	// CheckinsTable is the table the holds the checkins relation/edge.
	CheckinsTable = "checkouts"
	// CheckinsInverseTable is the table name for the CheckIn entity.
	// It exists in this package in order to avoid circular dependency with the "checkin" package.
	CheckinsInverseTable = "check_ins"
	// CheckinsColumn is the table column denoting the checkins relation/edge.
	CheckinsColumn = "check_in_checkouts"
)

// Columns holds all SQL columns for checkout fields.
var Columns = []string{
	FieldID,
	FieldCheckoutDate,
	FieldIdentityCard,
	FieldPrice,
	FieldComment,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Checkout type.
var ForeignKeys = []string{
	"check_in_checkouts",
	"staff_id",
	"status_checkouts",
	"status_opinion_checkouts",
}

var (
	// IdentityCardValidator is a validator for the "identity_card" field. It is called by the builders before save.
	IdentityCardValidator func(string) error
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(float64) error
	// CommentValidator is a validator for the "comment" field. It is called by the builders before save.
	CommentValidator func(string) error
)
