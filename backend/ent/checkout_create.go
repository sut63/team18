// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/checkout"
	"github.com/team18/app/ent/counterstaff"
	"github.com/team18/app/ent/status"
	"github.com/team18/app/ent/statusopinion"
)

// CheckoutCreate is the builder for creating a Checkout entity.
type CheckoutCreate struct {
	config
	mutation *CheckoutMutation
	hooks    []Hook
}

// SetCheckoutDate sets the checkout_date field.
func (cc *CheckoutCreate) SetCheckoutDate(t time.Time) *CheckoutCreate {
	cc.mutation.SetCheckoutDate(t)
	return cc
}

// SetIdentityCard sets the identity_card field.
func (cc *CheckoutCreate) SetIdentityCard(s string) *CheckoutCreate {
	cc.mutation.SetIdentityCard(s)
	return cc
}

// SetPrice sets the price field.
func (cc *CheckoutCreate) SetPrice(f float64) *CheckoutCreate {
	cc.mutation.SetPrice(f)
	return cc
}

// SetComment sets the comment field.
func (cc *CheckoutCreate) SetComment(s string) *CheckoutCreate {
	cc.mutation.SetComment(s)
	return cc
}

// SetStatussID sets the statuss edge to Status by id.
func (cc *CheckoutCreate) SetStatussID(id int) *CheckoutCreate {
	cc.mutation.SetStatussID(id)
	return cc
}

// SetNillableStatussID sets the statuss edge to Status by id if the given value is not nil.
func (cc *CheckoutCreate) SetNillableStatussID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetStatussID(*id)
	}
	return cc
}

// SetStatuss sets the statuss edge to Status.
func (cc *CheckoutCreate) SetStatuss(s *Status) *CheckoutCreate {
	return cc.SetStatussID(s.ID)
}

// SetStatusopinionID sets the statusopinion edge to StatusOpinion by id.
func (cc *CheckoutCreate) SetStatusopinionID(id int) *CheckoutCreate {
	cc.mutation.SetStatusopinionID(id)
	return cc
}

// SetNillableStatusopinionID sets the statusopinion edge to StatusOpinion by id if the given value is not nil.
func (cc *CheckoutCreate) SetNillableStatusopinionID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetStatusopinionID(*id)
	}
	return cc
}

// SetStatusopinion sets the statusopinion edge to StatusOpinion.
func (cc *CheckoutCreate) SetStatusopinion(s *StatusOpinion) *CheckoutCreate {
	return cc.SetStatusopinionID(s.ID)
}

// SetCounterstaffsID sets the counterstaffs edge to CounterStaff by id.
func (cc *CheckoutCreate) SetCounterstaffsID(id int) *CheckoutCreate {
	cc.mutation.SetCounterstaffsID(id)
	return cc
}

// SetNillableCounterstaffsID sets the counterstaffs edge to CounterStaff by id if the given value is not nil.
func (cc *CheckoutCreate) SetNillableCounterstaffsID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetCounterstaffsID(*id)
	}
	return cc
}

// SetCounterstaffs sets the counterstaffs edge to CounterStaff.
func (cc *CheckoutCreate) SetCounterstaffs(c *CounterStaff) *CheckoutCreate {
	return cc.SetCounterstaffsID(c.ID)
}

// SetCheckinsID sets the checkins edge to CheckIn by id.
func (cc *CheckoutCreate) SetCheckinsID(id int) *CheckoutCreate {
	cc.mutation.SetCheckinsID(id)
	return cc
}

// SetCheckins sets the checkins edge to CheckIn.
func (cc *CheckoutCreate) SetCheckins(c *CheckIn) *CheckoutCreate {
	return cc.SetCheckinsID(c.ID)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cc *CheckoutCreate) Mutation() *CheckoutMutation {
	return cc.mutation
}

// Save creates the Checkout in the database.
func (cc *CheckoutCreate) Save(ctx context.Context) (*Checkout, error) {
	if _, ok := cc.mutation.CheckoutDate(); !ok {
		return nil, &ValidationError{Name: "checkout_date", err: errors.New("ent: missing required field \"checkout_date\"")}
	}
	if _, ok := cc.mutation.IdentityCard(); !ok {
		return nil, &ValidationError{Name: "identity_card", err: errors.New("ent: missing required field \"identity_card\"")}
	}
	if v, ok := cc.mutation.IdentityCard(); ok {
		if err := checkout.IdentityCardValidator(v); err != nil {
			return nil, &ValidationError{Name: "identity_card", err: fmt.Errorf("ent: validator failed for field \"identity_card\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Price(); !ok {
		return nil, &ValidationError{Name: "price", err: errors.New("ent: missing required field \"price\"")}
	}
	if v, ok := cc.mutation.Price(); ok {
		if err := checkout.PriceValidator(v); err != nil {
			return nil, &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Comment(); !ok {
		return nil, &ValidationError{Name: "comment", err: errors.New("ent: missing required field \"comment\"")}
	}
	if v, ok := cc.mutation.Comment(); ok {
		if err := checkout.CommentValidator(v); err != nil {
			return nil, &ValidationError{Name: "comment", err: fmt.Errorf("ent: validator failed for field \"comment\": %w", err)}
		}
	}
	if _, ok := cc.mutation.CheckinsID(); !ok {
		return nil, &ValidationError{Name: "checkins", err: errors.New("ent: missing required edge \"checkins\"")}
	}
	var (
		err  error
		node *Checkout
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CheckoutCreate) SaveX(ctx context.Context) *Checkout {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CheckoutCreate) sqlSave(ctx context.Context) (*Checkout, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *CheckoutCreate) createSpec() (*Checkout, *sqlgraph.CreateSpec) {
	var (
		c     = &Checkout{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: checkout.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkout.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CheckoutDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldCheckoutDate,
		})
		c.CheckoutDate = value
	}
	if value, ok := cc.mutation.IdentityCard(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkout.FieldIdentityCard,
		})
		c.IdentityCard = value
	}
	if value, ok := cc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: checkout.FieldPrice,
		})
		c.Price = value
	}
	if value, ok := cc.mutation.Comment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkout.FieldComment,
		})
		c.Comment = value
	}
	if nodes := cc.mutation.StatussIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.StatussTable,
			Columns: []string{checkout.StatussColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.StatusopinionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.StatusopinionTable,
			Columns: []string{checkout.StatusopinionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusopinion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CounterstaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.CounterstaffsTable,
			Columns: []string{checkout.CounterstaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterstaff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.CheckinsTable,
			Columns: []string{checkout.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
