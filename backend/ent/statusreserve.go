// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team18/app/ent/statusreserve"
)

// StatusReserve is the model entity for the StatusReserve schema.
type StatusReserve struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StatusName holds the value of the "status_name" field.
	StatusName string `json:"status_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusReserveQuery when eager-loading is set.
	Edges StatusReserveEdges `json:"edges"`
}

// StatusReserveEdges holds the relations/edges for other nodes in the graph.
type StatusReserveEdges struct {
	// Reserves holds the value of the reserves edge.
	Reserves []*ReserveRoom
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ReservesOrErr returns the Reserves value or an error if the edge
// was not loaded in eager-loading.
func (e StatusReserveEdges) ReservesOrErr() ([]*ReserveRoom, error) {
	if e.loadedTypes[0] {
		return e.Reserves, nil
	}
	return nil, &NotLoadedError{edge: "reserves"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatusReserve) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // status_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatusReserve fields.
func (sr *StatusReserve) assignValues(values ...interface{}) error {
	if m, n := len(values), len(statusreserve.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	sr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status_name", values[0])
	} else if value.Valid {
		sr.StatusName = value.String
	}
	return nil
}

// QueryReserves queries the reserves edge of the StatusReserve.
func (sr *StatusReserve) QueryReserves() *ReserveRoomQuery {
	return (&StatusReserveClient{config: sr.config}).QueryReserves(sr)
}

// Update returns a builder for updating this StatusReserve.
// Note that, you need to call StatusReserve.Unwrap() before calling this method, if this StatusReserve
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *StatusReserve) Update() *StatusReserveUpdateOne {
	return (&StatusReserveClient{config: sr.config}).UpdateOne(sr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (sr *StatusReserve) Unwrap() *StatusReserve {
	tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatusReserve is not a transactional entity")
	}
	sr.config.driver = tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *StatusReserve) String() string {
	var builder strings.Builder
	builder.WriteString("StatusReserve(")
	builder.WriteString(fmt.Sprintf("id=%v", sr.ID))
	builder.WriteString(", status_name=")
	builder.WriteString(sr.StatusName)
	builder.WriteByte(')')
	return builder.String()
}

// StatusReserves is a parsable slice of StatusReserve.
type StatusReserves []*StatusReserve

func (sr StatusReserves) config(cfg config) {
	for _i := range sr {
		sr[_i].config = cfg
	}
}
