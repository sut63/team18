// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/team18/app/ent/migrate"

	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/checkout"
	"github.com/team18/app/ent/counterstaff"
	"github.com/team18/app/ent/customer"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/fixroom"
	"github.com/team18/app/ent/furniture"
	"github.com/team18/app/ent/furnituredetail"
	"github.com/team18/app/ent/furnituretype"
	"github.com/team18/app/ent/promotion"
	"github.com/team18/app/ent/reserveroom"
	"github.com/team18/app/ent/status"
	"github.com/team18/app/ent/statuscheckin"
	"github.com/team18/app/ent/statusopinion"
	"github.com/team18/app/ent/statusreserve"
	"github.com/team18/app/ent/statusroom"
	"github.com/team18/app/ent/typeroom"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CheckIn is the client for interacting with the CheckIn builders.
	CheckIn *CheckInClient
	// Checkout is the client for interacting with the Checkout builders.
	Checkout *CheckoutClient
	// CounterStaff is the client for interacting with the CounterStaff builders.
	CounterStaff *CounterStaffClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// DataRoom is the client for interacting with the DataRoom builders.
	DataRoom *DataRoomClient
	// FixRoom is the client for interacting with the FixRoom builders.
	FixRoom *FixRoomClient
	// Furniture is the client for interacting with the Furniture builders.
	Furniture *FurnitureClient
	// FurnitureDetail is the client for interacting with the FurnitureDetail builders.
	FurnitureDetail *FurnitureDetailClient
	// FurnitureType is the client for interacting with the FurnitureType builders.
	FurnitureType *FurnitureTypeClient
	// Promotion is the client for interacting with the Promotion builders.
	Promotion *PromotionClient
	// ReserveRoom is the client for interacting with the ReserveRoom builders.
	ReserveRoom *ReserveRoomClient
	// Status is the client for interacting with the Status builders.
	Status *StatusClient
	// StatusCheckIn is the client for interacting with the StatusCheckIn builders.
	StatusCheckIn *StatusCheckInClient
	// StatusOpinion is the client for interacting with the StatusOpinion builders.
	StatusOpinion *StatusOpinionClient
	// StatusReserve is the client for interacting with the StatusReserve builders.
	StatusReserve *StatusReserveClient
	// StatusRoom is the client for interacting with the StatusRoom builders.
	StatusRoom *StatusRoomClient
	// TypeRoom is the client for interacting with the TypeRoom builders.
	TypeRoom *TypeRoomClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CheckIn = NewCheckInClient(c.config)
	c.Checkout = NewCheckoutClient(c.config)
	c.CounterStaff = NewCounterStaffClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.DataRoom = NewDataRoomClient(c.config)
	c.FixRoom = NewFixRoomClient(c.config)
	c.Furniture = NewFurnitureClient(c.config)
	c.FurnitureDetail = NewFurnitureDetailClient(c.config)
	c.FurnitureType = NewFurnitureTypeClient(c.config)
	c.Promotion = NewPromotionClient(c.config)
	c.ReserveRoom = NewReserveRoomClient(c.config)
	c.Status = NewStatusClient(c.config)
	c.StatusCheckIn = NewStatusCheckInClient(c.config)
	c.StatusOpinion = NewStatusOpinionClient(c.config)
	c.StatusReserve = NewStatusReserveClient(c.config)
	c.StatusRoom = NewStatusRoomClient(c.config)
	c.TypeRoom = NewTypeRoomClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		CheckIn:         NewCheckInClient(cfg),
		Checkout:        NewCheckoutClient(cfg),
		CounterStaff:    NewCounterStaffClient(cfg),
		Customer:        NewCustomerClient(cfg),
		DataRoom:        NewDataRoomClient(cfg),
		FixRoom:         NewFixRoomClient(cfg),
		Furniture:       NewFurnitureClient(cfg),
		FurnitureDetail: NewFurnitureDetailClient(cfg),
		FurnitureType:   NewFurnitureTypeClient(cfg),
		Promotion:       NewPromotionClient(cfg),
		ReserveRoom:     NewReserveRoomClient(cfg),
		Status:          NewStatusClient(cfg),
		StatusCheckIn:   NewStatusCheckInClient(cfg),
		StatusOpinion:   NewStatusOpinionClient(cfg),
		StatusReserve:   NewStatusReserveClient(cfg),
		StatusRoom:      NewStatusRoomClient(cfg),
		TypeRoom:        NewTypeRoomClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:          cfg,
		CheckIn:         NewCheckInClient(cfg),
		Checkout:        NewCheckoutClient(cfg),
		CounterStaff:    NewCounterStaffClient(cfg),
		Customer:        NewCustomerClient(cfg),
		DataRoom:        NewDataRoomClient(cfg),
		FixRoom:         NewFixRoomClient(cfg),
		Furniture:       NewFurnitureClient(cfg),
		FurnitureDetail: NewFurnitureDetailClient(cfg),
		FurnitureType:   NewFurnitureTypeClient(cfg),
		Promotion:       NewPromotionClient(cfg),
		ReserveRoom:     NewReserveRoomClient(cfg),
		Status:          NewStatusClient(cfg),
		StatusCheckIn:   NewStatusCheckInClient(cfg),
		StatusOpinion:   NewStatusOpinionClient(cfg),
		StatusReserve:   NewStatusReserveClient(cfg),
		StatusRoom:      NewStatusRoomClient(cfg),
		TypeRoom:        NewTypeRoomClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CheckIn.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CheckIn.Use(hooks...)
	c.Checkout.Use(hooks...)
	c.CounterStaff.Use(hooks...)
	c.Customer.Use(hooks...)
	c.DataRoom.Use(hooks...)
	c.FixRoom.Use(hooks...)
	c.Furniture.Use(hooks...)
	c.FurnitureDetail.Use(hooks...)
	c.FurnitureType.Use(hooks...)
	c.Promotion.Use(hooks...)
	c.ReserveRoom.Use(hooks...)
	c.Status.Use(hooks...)
	c.StatusCheckIn.Use(hooks...)
	c.StatusOpinion.Use(hooks...)
	c.StatusReserve.Use(hooks...)
	c.StatusRoom.Use(hooks...)
	c.TypeRoom.Use(hooks...)
}

// CheckInClient is a client for the CheckIn schema.
type CheckInClient struct {
	config
}

// NewCheckInClient returns a client for the CheckIn from the given config.
func NewCheckInClient(c config) *CheckInClient {
	return &CheckInClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checkin.Hooks(f(g(h())))`.
func (c *CheckInClient) Use(hooks ...Hook) {
	c.hooks.CheckIn = append(c.hooks.CheckIn, hooks...)
}

// Create returns a create builder for CheckIn.
func (c *CheckInClient) Create() *CheckInCreate {
	mutation := newCheckInMutation(c.config, OpCreate)
	return &CheckInCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CheckIn.
func (c *CheckInClient) Update() *CheckInUpdate {
	mutation := newCheckInMutation(c.config, OpUpdate)
	return &CheckInUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckInClient) UpdateOne(ci *CheckIn) *CheckInUpdateOne {
	mutation := newCheckInMutation(c.config, OpUpdateOne, withCheckIn(ci))
	return &CheckInUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckInClient) UpdateOneID(id int) *CheckInUpdateOne {
	mutation := newCheckInMutation(c.config, OpUpdateOne, withCheckInID(id))
	return &CheckInUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CheckIn.
func (c *CheckInClient) Delete() *CheckInDelete {
	mutation := newCheckInMutation(c.config, OpDelete)
	return &CheckInDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CheckInClient) DeleteOne(ci *CheckIn) *CheckInDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CheckInClient) DeleteOneID(id int) *CheckInDeleteOne {
	builder := c.Delete().Where(checkin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckInDeleteOne{builder}
}

// Create returns a query builder for CheckIn.
func (c *CheckInClient) Query() *CheckInQuery {
	return &CheckInQuery{config: c.config}
}

// Get returns a CheckIn entity by its id.
func (c *CheckInClient) Get(ctx context.Context, id int) (*CheckIn, error) {
	return c.Query().Where(checkin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckInClient) GetX(ctx context.Context, id int) *CheckIn {
	ci, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ci
}

// QueryCustomer queries the customer edge of a CheckIn.
func (c *CheckInClient) QueryCustomer(ci *CheckIn) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkin.Table, checkin.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkin.CustomerTable, checkin.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCounter queries the counter edge of a CheckIn.
func (c *CheckInClient) QueryCounter(ci *CheckIn) *CounterStaffQuery {
	query := &CounterStaffQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkin.Table, checkin.FieldID, id),
			sqlgraph.To(counterstaff.Table, counterstaff.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkin.CounterTable, checkin.CounterColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReserveroom queries the reserveroom edge of a CheckIn.
func (c *CheckInClient) QueryReserveroom(ci *CheckIn) *ReserveRoomQuery {
	query := &ReserveRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkin.Table, checkin.FieldID, id),
			sqlgraph.To(reserveroom.Table, reserveroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkin.ReserveroomTable, checkin.ReserveroomColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDataroom queries the dataroom edge of a CheckIn.
func (c *CheckInClient) QueryDataroom(ci *CheckIn) *DataRoomQuery {
	query := &DataRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkin.Table, checkin.FieldID, id),
			sqlgraph.To(dataroom.Table, dataroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkin.DataroomTable, checkin.DataroomColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatus queries the status edge of a CheckIn.
func (c *CheckInClient) QueryStatus(ci *CheckIn) *StatusCheckInQuery {
	query := &StatusCheckInQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkin.Table, checkin.FieldID, id),
			sqlgraph.To(statuscheckin.Table, statuscheckin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkin.StatusTable, checkin.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckouts queries the checkouts edge of a CheckIn.
func (c *CheckInClient) QueryCheckouts(ci *CheckIn) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkin.Table, checkin.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, checkin.CheckoutsTable, checkin.CheckoutsColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckInClient) Hooks() []Hook {
	return c.hooks.CheckIn
}

// CheckoutClient is a client for the Checkout schema.
type CheckoutClient struct {
	config
}

// NewCheckoutClient returns a client for the Checkout from the given config.
func NewCheckoutClient(c config) *CheckoutClient {
	return &CheckoutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checkout.Hooks(f(g(h())))`.
func (c *CheckoutClient) Use(hooks ...Hook) {
	c.hooks.Checkout = append(c.hooks.Checkout, hooks...)
}

// Create returns a create builder for Checkout.
func (c *CheckoutClient) Create() *CheckoutCreate {
	mutation := newCheckoutMutation(c.config, OpCreate)
	return &CheckoutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Checkout.
func (c *CheckoutClient) Update() *CheckoutUpdate {
	mutation := newCheckoutMutation(c.config, OpUpdate)
	return &CheckoutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckoutClient) UpdateOne(ch *Checkout) *CheckoutUpdateOne {
	mutation := newCheckoutMutation(c.config, OpUpdateOne, withCheckout(ch))
	return &CheckoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckoutClient) UpdateOneID(id int) *CheckoutUpdateOne {
	mutation := newCheckoutMutation(c.config, OpUpdateOne, withCheckoutID(id))
	return &CheckoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Checkout.
func (c *CheckoutClient) Delete() *CheckoutDelete {
	mutation := newCheckoutMutation(c.config, OpDelete)
	return &CheckoutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CheckoutClient) DeleteOne(ch *Checkout) *CheckoutDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CheckoutClient) DeleteOneID(id int) *CheckoutDeleteOne {
	builder := c.Delete().Where(checkout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckoutDeleteOne{builder}
}

// Create returns a query builder for Checkout.
func (c *CheckoutClient) Query() *CheckoutQuery {
	return &CheckoutQuery{config: c.config}
}

// Get returns a Checkout entity by its id.
func (c *CheckoutClient) Get(ctx context.Context, id int) (*Checkout, error) {
	return c.Query().Where(checkout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckoutClient) GetX(ctx context.Context, id int) *Checkout {
	ch, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ch
}

// QueryStatuss queries the statuss edge of a Checkout.
func (c *CheckoutClient) QueryStatuss(ch *Checkout) *StatusQuery {
	query := &StatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkout.StatussTable, checkout.StatussColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusopinion queries the statusopinion edge of a Checkout.
func (c *CheckoutClient) QueryStatusopinion(ch *Checkout) *StatusOpinionQuery {
	query := &StatusOpinionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(statusopinion.Table, statusopinion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkout.StatusopinionTable, checkout.StatusopinionColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCounterstaffs queries the counterstaffs edge of a Checkout.
func (c *CheckoutClient) QueryCounterstaffs(ch *Checkout) *CounterStaffQuery {
	query := &CounterStaffQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(counterstaff.Table, counterstaff.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkout.CounterstaffsTable, checkout.CounterstaffsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckins queries the checkins edge of a Checkout.
func (c *CheckoutClient) QueryCheckins(ch *Checkout) *CheckInQuery {
	query := &CheckInQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(checkin.Table, checkin.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, checkout.CheckinsTable, checkout.CheckinsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckoutClient) Hooks() []Hook {
	return c.hooks.Checkout
}

// CounterStaffClient is a client for the CounterStaff schema.
type CounterStaffClient struct {
	config
}

// NewCounterStaffClient returns a client for the CounterStaff from the given config.
func NewCounterStaffClient(c config) *CounterStaffClient {
	return &CounterStaffClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `counterstaff.Hooks(f(g(h())))`.
func (c *CounterStaffClient) Use(hooks ...Hook) {
	c.hooks.CounterStaff = append(c.hooks.CounterStaff, hooks...)
}

// Create returns a create builder for CounterStaff.
func (c *CounterStaffClient) Create() *CounterStaffCreate {
	mutation := newCounterStaffMutation(c.config, OpCreate)
	return &CounterStaffCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CounterStaff.
func (c *CounterStaffClient) Update() *CounterStaffUpdate {
	mutation := newCounterStaffMutation(c.config, OpUpdate)
	return &CounterStaffUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CounterStaffClient) UpdateOne(cs *CounterStaff) *CounterStaffUpdateOne {
	mutation := newCounterStaffMutation(c.config, OpUpdateOne, withCounterStaff(cs))
	return &CounterStaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CounterStaffClient) UpdateOneID(id int) *CounterStaffUpdateOne {
	mutation := newCounterStaffMutation(c.config, OpUpdateOne, withCounterStaffID(id))
	return &CounterStaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CounterStaff.
func (c *CounterStaffClient) Delete() *CounterStaffDelete {
	mutation := newCounterStaffMutation(c.config, OpDelete)
	return &CounterStaffDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CounterStaffClient) DeleteOne(cs *CounterStaff) *CounterStaffDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CounterStaffClient) DeleteOneID(id int) *CounterStaffDeleteOne {
	builder := c.Delete().Where(counterstaff.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CounterStaffDeleteOne{builder}
}

// Create returns a query builder for CounterStaff.
func (c *CounterStaffClient) Query() *CounterStaffQuery {
	return &CounterStaffQuery{config: c.config}
}

// Get returns a CounterStaff entity by its id.
func (c *CounterStaffClient) Get(ctx context.Context, id int) (*CounterStaff, error) {
	return c.Query().Where(counterstaff.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CounterStaffClient) GetX(ctx context.Context, id int) *CounterStaff {
	cs, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cs
}

// QueryCheckins queries the checkins edge of a CounterStaff.
func (c *CounterStaffClient) QueryCheckins(cs *CounterStaff) *CheckInQuery {
	query := &CheckInQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(counterstaff.Table, counterstaff.FieldID, id),
			sqlgraph.To(checkin.Table, checkin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, counterstaff.CheckinsTable, counterstaff.CheckinsColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckouts queries the checkouts edge of a CounterStaff.
func (c *CounterStaffClient) QueryCheckouts(cs *CounterStaff) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(counterstaff.Table, counterstaff.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, counterstaff.CheckoutsTable, counterstaff.CheckoutsColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetails queries the details edge of a CounterStaff.
func (c *CounterStaffClient) QueryDetails(cs *CounterStaff) *FurnitureDetailQuery {
	query := &FurnitureDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(counterstaff.Table, counterstaff.FieldID, id),
			sqlgraph.To(furnituredetail.Table, furnituredetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, counterstaff.DetailsTable, counterstaff.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CounterStaffClient) Hooks() []Hook {
	return c.hooks.CounterStaff
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a create builder for Customer.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerClient) DeleteOneID(id int) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Create returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{config: c.config}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int) *Customer {
	cu, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cu
}

// QueryReserves queries the reserves edge of a Customer.
func (c *CustomerClient) QueryReserves(cu *Customer) *ReserveRoomQuery {
	query := &ReserveRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(reserveroom.Table, reserveroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.ReservesTable, customer.ReservesColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixs queries the fixs edge of a Customer.
func (c *CustomerClient) QueryFixs(cu *Customer) *FixRoomQuery {
	query := &FixRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(fixroom.Table, fixroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.FixsTable, customer.FixsColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckins queries the checkins edge of a Customer.
func (c *CustomerClient) QueryCheckins(cu *Customer) *CheckInQuery {
	query := &CheckInQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(checkin.Table, checkin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.CheckinsTable, customer.CheckinsColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// DataRoomClient is a client for the DataRoom schema.
type DataRoomClient struct {
	config
}

// NewDataRoomClient returns a client for the DataRoom from the given config.
func NewDataRoomClient(c config) *DataRoomClient {
	return &DataRoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dataroom.Hooks(f(g(h())))`.
func (c *DataRoomClient) Use(hooks ...Hook) {
	c.hooks.DataRoom = append(c.hooks.DataRoom, hooks...)
}

// Create returns a create builder for DataRoom.
func (c *DataRoomClient) Create() *DataRoomCreate {
	mutation := newDataRoomMutation(c.config, OpCreate)
	return &DataRoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for DataRoom.
func (c *DataRoomClient) Update() *DataRoomUpdate {
	mutation := newDataRoomMutation(c.config, OpUpdate)
	return &DataRoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DataRoomClient) UpdateOne(dr *DataRoom) *DataRoomUpdateOne {
	mutation := newDataRoomMutation(c.config, OpUpdateOne, withDataRoom(dr))
	return &DataRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DataRoomClient) UpdateOneID(id int) *DataRoomUpdateOne {
	mutation := newDataRoomMutation(c.config, OpUpdateOne, withDataRoomID(id))
	return &DataRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DataRoom.
func (c *DataRoomClient) Delete() *DataRoomDelete {
	mutation := newDataRoomMutation(c.config, OpDelete)
	return &DataRoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DataRoomClient) DeleteOne(dr *DataRoom) *DataRoomDeleteOne {
	return c.DeleteOneID(dr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DataRoomClient) DeleteOneID(id int) *DataRoomDeleteOne {
	builder := c.Delete().Where(dataroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DataRoomDeleteOne{builder}
}

// Create returns a query builder for DataRoom.
func (c *DataRoomClient) Query() *DataRoomQuery {
	return &DataRoomQuery{config: c.config}
}

// Get returns a DataRoom entity by its id.
func (c *DataRoomClient) Get(ctx context.Context, id int) (*DataRoom, error) {
	return c.Query().Where(dataroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DataRoomClient) GetX(ctx context.Context, id int) *DataRoom {
	dr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return dr
}

// QueryReserves queries the reserves edge of a DataRoom.
func (c *DataRoomClient) QueryReserves(dr *DataRoom) *ReserveRoomQuery {
	query := &ReserveRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, id),
			sqlgraph.To(reserveroom.Table, reserveroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dataroom.ReservesTable, dataroom.ReservesColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFixs queries the fixs edge of a DataRoom.
func (c *DataRoomClient) QueryFixs(dr *DataRoom) *FixRoomQuery {
	query := &FixRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, id),
			sqlgraph.To(fixroom.Table, fixroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dataroom.FixsTable, dataroom.FixsColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDetails queries the details edge of a DataRoom.
func (c *DataRoomClient) QueryDetails(dr *DataRoom) *FurnitureDetailQuery {
	query := &FurnitureDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, id),
			sqlgraph.To(furnituredetail.Table, furnituredetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dataroom.DetailsTable, dataroom.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckins queries the checkins edge of a DataRoom.
func (c *DataRoomClient) QueryCheckins(dr *DataRoom) *CheckInQuery {
	query := &CheckInQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, id),
			sqlgraph.To(checkin.Table, checkin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dataroom.CheckinsTable, dataroom.CheckinsColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPromotion queries the promotion edge of a DataRoom.
func (c *DataRoomClient) QueryPromotion(dr *DataRoom) *PromotionQuery {
	query := &PromotionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, id),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dataroom.PromotionTable, dataroom.PromotionColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusroom queries the statusroom edge of a DataRoom.
func (c *DataRoomClient) QueryStatusroom(dr *DataRoom) *StatusRoomQuery {
	query := &StatusRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, id),
			sqlgraph.To(statusroom.Table, statusroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dataroom.StatusroomTable, dataroom.StatusroomColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTyperoom queries the typeroom edge of a DataRoom.
func (c *DataRoomClient) QueryTyperoom(dr *DataRoom) *TypeRoomQuery {
	query := &TypeRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dataroom.Table, dataroom.FieldID, id),
			sqlgraph.To(typeroom.Table, typeroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dataroom.TyperoomTable, dataroom.TyperoomColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DataRoomClient) Hooks() []Hook {
	return c.hooks.DataRoom
}

// FixRoomClient is a client for the FixRoom schema.
type FixRoomClient struct {
	config
}

// NewFixRoomClient returns a client for the FixRoom from the given config.
func NewFixRoomClient(c config) *FixRoomClient {
	return &FixRoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fixroom.Hooks(f(g(h())))`.
func (c *FixRoomClient) Use(hooks ...Hook) {
	c.hooks.FixRoom = append(c.hooks.FixRoom, hooks...)
}

// Create returns a create builder for FixRoom.
func (c *FixRoomClient) Create() *FixRoomCreate {
	mutation := newFixRoomMutation(c.config, OpCreate)
	return &FixRoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for FixRoom.
func (c *FixRoomClient) Update() *FixRoomUpdate {
	mutation := newFixRoomMutation(c.config, OpUpdate)
	return &FixRoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FixRoomClient) UpdateOne(fr *FixRoom) *FixRoomUpdateOne {
	mutation := newFixRoomMutation(c.config, OpUpdateOne, withFixRoom(fr))
	return &FixRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FixRoomClient) UpdateOneID(id int) *FixRoomUpdateOne {
	mutation := newFixRoomMutation(c.config, OpUpdateOne, withFixRoomID(id))
	return &FixRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FixRoom.
func (c *FixRoomClient) Delete() *FixRoomDelete {
	mutation := newFixRoomMutation(c.config, OpDelete)
	return &FixRoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FixRoomClient) DeleteOne(fr *FixRoom) *FixRoomDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FixRoomClient) DeleteOneID(id int) *FixRoomDeleteOne {
	builder := c.Delete().Where(fixroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FixRoomDeleteOne{builder}
}

// Create returns a query builder for FixRoom.
func (c *FixRoomClient) Query() *FixRoomQuery {
	return &FixRoomQuery{config: c.config}
}

// Get returns a FixRoom entity by its id.
func (c *FixRoomClient) Get(ctx context.Context, id int) (*FixRoom, error) {
	return c.Query().Where(fixroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FixRoomClient) GetX(ctx context.Context, id int) *FixRoom {
	fr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return fr
}

// QueryCustomer queries the customer edge of a FixRoom.
func (c *FixRoomClient) QueryCustomer(fr *FixRoom) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixroom.Table, fixroom.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixroom.CustomerTable, fixroom.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFurnitureDetail queries the furnitureDetail edge of a FixRoom.
func (c *FixRoomClient) QueryFurnitureDetail(fr *FixRoom) *FurnitureDetailQuery {
	query := &FurnitureDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixroom.Table, fixroom.FieldID, id),
			sqlgraph.To(furnituredetail.Table, furnituredetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixroom.FurnitureDetailTable, fixroom.FurnitureDetailColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoom queries the room edge of a FixRoom.
func (c *FixRoomClient) QueryRoom(fr *FixRoom) *DataRoomQuery {
	query := &DataRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fixroom.Table, fixroom.FieldID, id),
			sqlgraph.To(dataroom.Table, dataroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fixroom.RoomTable, fixroom.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FixRoomClient) Hooks() []Hook {
	return c.hooks.FixRoom
}

// FurnitureClient is a client for the Furniture schema.
type FurnitureClient struct {
	config
}

// NewFurnitureClient returns a client for the Furniture from the given config.
func NewFurnitureClient(c config) *FurnitureClient {
	return &FurnitureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `furniture.Hooks(f(g(h())))`.
func (c *FurnitureClient) Use(hooks ...Hook) {
	c.hooks.Furniture = append(c.hooks.Furniture, hooks...)
}

// Create returns a create builder for Furniture.
func (c *FurnitureClient) Create() *FurnitureCreate {
	mutation := newFurnitureMutation(c.config, OpCreate)
	return &FurnitureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Furniture.
func (c *FurnitureClient) Update() *FurnitureUpdate {
	mutation := newFurnitureMutation(c.config, OpUpdate)
	return &FurnitureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FurnitureClient) UpdateOne(f *Furniture) *FurnitureUpdateOne {
	mutation := newFurnitureMutation(c.config, OpUpdateOne, withFurniture(f))
	return &FurnitureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FurnitureClient) UpdateOneID(id int) *FurnitureUpdateOne {
	mutation := newFurnitureMutation(c.config, OpUpdateOne, withFurnitureID(id))
	return &FurnitureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Furniture.
func (c *FurnitureClient) Delete() *FurnitureDelete {
	mutation := newFurnitureMutation(c.config, OpDelete)
	return &FurnitureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FurnitureClient) DeleteOne(f *Furniture) *FurnitureDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FurnitureClient) DeleteOneID(id int) *FurnitureDeleteOne {
	builder := c.Delete().Where(furniture.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FurnitureDeleteOne{builder}
}

// Create returns a query builder for Furniture.
func (c *FurnitureClient) Query() *FurnitureQuery {
	return &FurnitureQuery{config: c.config}
}

// Get returns a Furniture entity by its id.
func (c *FurnitureClient) Get(ctx context.Context, id int) (*Furniture, error) {
	return c.Query().Where(furniture.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FurnitureClient) GetX(ctx context.Context, id int) *Furniture {
	f, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return f
}

// QueryDetails queries the details edge of a Furniture.
func (c *FurnitureClient) QueryDetails(f *Furniture) *FurnitureDetailQuery {
	query := &FurnitureDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(furniture.Table, furniture.FieldID, id),
			sqlgraph.To(furnituredetail.Table, furnituredetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, furniture.DetailsTable, furniture.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FurnitureClient) Hooks() []Hook {
	return c.hooks.Furniture
}

// FurnitureDetailClient is a client for the FurnitureDetail schema.
type FurnitureDetailClient struct {
	config
}

// NewFurnitureDetailClient returns a client for the FurnitureDetail from the given config.
func NewFurnitureDetailClient(c config) *FurnitureDetailClient {
	return &FurnitureDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `furnituredetail.Hooks(f(g(h())))`.
func (c *FurnitureDetailClient) Use(hooks ...Hook) {
	c.hooks.FurnitureDetail = append(c.hooks.FurnitureDetail, hooks...)
}

// Create returns a create builder for FurnitureDetail.
func (c *FurnitureDetailClient) Create() *FurnitureDetailCreate {
	mutation := newFurnitureDetailMutation(c.config, OpCreate)
	return &FurnitureDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for FurnitureDetail.
func (c *FurnitureDetailClient) Update() *FurnitureDetailUpdate {
	mutation := newFurnitureDetailMutation(c.config, OpUpdate)
	return &FurnitureDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FurnitureDetailClient) UpdateOne(fd *FurnitureDetail) *FurnitureDetailUpdateOne {
	mutation := newFurnitureDetailMutation(c.config, OpUpdateOne, withFurnitureDetail(fd))
	return &FurnitureDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FurnitureDetailClient) UpdateOneID(id int) *FurnitureDetailUpdateOne {
	mutation := newFurnitureDetailMutation(c.config, OpUpdateOne, withFurnitureDetailID(id))
	return &FurnitureDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FurnitureDetail.
func (c *FurnitureDetailClient) Delete() *FurnitureDetailDelete {
	mutation := newFurnitureDetailMutation(c.config, OpDelete)
	return &FurnitureDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FurnitureDetailClient) DeleteOne(fd *FurnitureDetail) *FurnitureDetailDeleteOne {
	return c.DeleteOneID(fd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FurnitureDetailClient) DeleteOneID(id int) *FurnitureDetailDeleteOne {
	builder := c.Delete().Where(furnituredetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FurnitureDetailDeleteOne{builder}
}

// Create returns a query builder for FurnitureDetail.
func (c *FurnitureDetailClient) Query() *FurnitureDetailQuery {
	return &FurnitureDetailQuery{config: c.config}
}

// Get returns a FurnitureDetail entity by its id.
func (c *FurnitureDetailClient) Get(ctx context.Context, id int) (*FurnitureDetail, error) {
	return c.Query().Where(furnituredetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FurnitureDetailClient) GetX(ctx context.Context, id int) *FurnitureDetail {
	fd, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return fd
}

// QueryFixs queries the fixs edge of a FurnitureDetail.
func (c *FurnitureDetailClient) QueryFixs(fd *FurnitureDetail) *FixRoomQuery {
	query := &FixRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituredetail.Table, furnituredetail.FieldID, id),
			sqlgraph.To(fixroom.Table, fixroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, furnituredetail.FixsTable, furnituredetail.FixsColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFurnitures queries the furnitures edge of a FurnitureDetail.
func (c *FurnitureDetailClient) QueryFurnitures(fd *FurnitureDetail) *FurnitureQuery {
	query := &FurnitureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituredetail.Table, furnituredetail.FieldID, id),
			sqlgraph.To(furniture.Table, furniture.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, furnituredetail.FurnituresTable, furnituredetail.FurnituresColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCounterstaffs queries the counterstaffs edge of a FurnitureDetail.
func (c *FurnitureDetailClient) QueryCounterstaffs(fd *FurnitureDetail) *CounterStaffQuery {
	query := &CounterStaffQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituredetail.Table, furnituredetail.FieldID, id),
			sqlgraph.To(counterstaff.Table, counterstaff.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, furnituredetail.CounterstaffsTable, furnituredetail.CounterstaffsColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTypes queries the types edge of a FurnitureDetail.
func (c *FurnitureDetailClient) QueryTypes(fd *FurnitureDetail) *FurnitureTypeQuery {
	query := &FurnitureTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituredetail.Table, furnituredetail.FieldID, id),
			sqlgraph.To(furnituretype.Table, furnituretype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, furnituredetail.TypesTable, furnituredetail.TypesColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRooms queries the rooms edge of a FurnitureDetail.
func (c *FurnitureDetailClient) QueryRooms(fd *FurnitureDetail) *DataRoomQuery {
	query := &DataRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituredetail.Table, furnituredetail.FieldID, id),
			sqlgraph.To(dataroom.Table, dataroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, furnituredetail.RoomsTable, furnituredetail.RoomsColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FurnitureDetailClient) Hooks() []Hook {
	return c.hooks.FurnitureDetail
}

// FurnitureTypeClient is a client for the FurnitureType schema.
type FurnitureTypeClient struct {
	config
}

// NewFurnitureTypeClient returns a client for the FurnitureType from the given config.
func NewFurnitureTypeClient(c config) *FurnitureTypeClient {
	return &FurnitureTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `furnituretype.Hooks(f(g(h())))`.
func (c *FurnitureTypeClient) Use(hooks ...Hook) {
	c.hooks.FurnitureType = append(c.hooks.FurnitureType, hooks...)
}

// Create returns a create builder for FurnitureType.
func (c *FurnitureTypeClient) Create() *FurnitureTypeCreate {
	mutation := newFurnitureTypeMutation(c.config, OpCreate)
	return &FurnitureTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for FurnitureType.
func (c *FurnitureTypeClient) Update() *FurnitureTypeUpdate {
	mutation := newFurnitureTypeMutation(c.config, OpUpdate)
	return &FurnitureTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FurnitureTypeClient) UpdateOne(ft *FurnitureType) *FurnitureTypeUpdateOne {
	mutation := newFurnitureTypeMutation(c.config, OpUpdateOne, withFurnitureType(ft))
	return &FurnitureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FurnitureTypeClient) UpdateOneID(id int) *FurnitureTypeUpdateOne {
	mutation := newFurnitureTypeMutation(c.config, OpUpdateOne, withFurnitureTypeID(id))
	return &FurnitureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FurnitureType.
func (c *FurnitureTypeClient) Delete() *FurnitureTypeDelete {
	mutation := newFurnitureTypeMutation(c.config, OpDelete)
	return &FurnitureTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FurnitureTypeClient) DeleteOne(ft *FurnitureType) *FurnitureTypeDeleteOne {
	return c.DeleteOneID(ft.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FurnitureTypeClient) DeleteOneID(id int) *FurnitureTypeDeleteOne {
	builder := c.Delete().Where(furnituretype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FurnitureTypeDeleteOne{builder}
}

// Create returns a query builder for FurnitureType.
func (c *FurnitureTypeClient) Query() *FurnitureTypeQuery {
	return &FurnitureTypeQuery{config: c.config}
}

// Get returns a FurnitureType entity by its id.
func (c *FurnitureTypeClient) Get(ctx context.Context, id int) (*FurnitureType, error) {
	return c.Query().Where(furnituretype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FurnitureTypeClient) GetX(ctx context.Context, id int) *FurnitureType {
	ft, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ft
}

// QueryDetails queries the details edge of a FurnitureType.
func (c *FurnitureTypeClient) QueryDetails(ft *FurnitureType) *FurnitureDetailQuery {
	query := &FurnitureDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(furnituretype.Table, furnituretype.FieldID, id),
			sqlgraph.To(furnituredetail.Table, furnituredetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, furnituretype.DetailsTable, furnituretype.DetailsColumn),
		)
		fromV = sqlgraph.Neighbors(ft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FurnitureTypeClient) Hooks() []Hook {
	return c.hooks.FurnitureType
}

// PromotionClient is a client for the Promotion schema.
type PromotionClient struct {
	config
}

// NewPromotionClient returns a client for the Promotion from the given config.
func NewPromotionClient(c config) *PromotionClient {
	return &PromotionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotion.Hooks(f(g(h())))`.
func (c *PromotionClient) Use(hooks ...Hook) {
	c.hooks.Promotion = append(c.hooks.Promotion, hooks...)
}

// Create returns a create builder for Promotion.
func (c *PromotionClient) Create() *PromotionCreate {
	mutation := newPromotionMutation(c.config, OpCreate)
	return &PromotionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Promotion.
func (c *PromotionClient) Update() *PromotionUpdate {
	mutation := newPromotionMutation(c.config, OpUpdate)
	return &PromotionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionClient) UpdateOne(pr *Promotion) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotion(pr))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionClient) UpdateOneID(id int) *PromotionUpdateOne {
	mutation := newPromotionMutation(c.config, OpUpdateOne, withPromotionID(id))
	return &PromotionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Promotion.
func (c *PromotionClient) Delete() *PromotionDelete {
	mutation := newPromotionMutation(c.config, OpDelete)
	return &PromotionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PromotionClient) DeleteOne(pr *Promotion) *PromotionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PromotionClient) DeleteOneID(id int) *PromotionDeleteOne {
	builder := c.Delete().Where(promotion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionDeleteOne{builder}
}

// Create returns a query builder for Promotion.
func (c *PromotionClient) Query() *PromotionQuery {
	return &PromotionQuery{config: c.config}
}

// Get returns a Promotion entity by its id.
func (c *PromotionClient) Get(ctx context.Context, id int) (*Promotion, error) {
	return c.Query().Where(promotion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionClient) GetX(ctx context.Context, id int) *Promotion {
	pr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pr
}

// QueryReserves queries the reserves edge of a Promotion.
func (c *PromotionClient) QueryReserves(pr *Promotion) *ReserveRoomQuery {
	query := &ReserveRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotion.Table, promotion.FieldID, id),
			sqlgraph.To(reserveroom.Table, reserveroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotion.ReservesTable, promotion.ReservesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDatarooms queries the datarooms edge of a Promotion.
func (c *PromotionClient) QueryDatarooms(pr *Promotion) *DataRoomQuery {
	query := &DataRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotion.Table, promotion.FieldID, id),
			sqlgraph.To(dataroom.Table, dataroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotion.DataroomsTable, promotion.DataroomsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionClient) Hooks() []Hook {
	return c.hooks.Promotion
}

// ReserveRoomClient is a client for the ReserveRoom schema.
type ReserveRoomClient struct {
	config
}

// NewReserveRoomClient returns a client for the ReserveRoom from the given config.
func NewReserveRoomClient(c config) *ReserveRoomClient {
	return &ReserveRoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reserveroom.Hooks(f(g(h())))`.
func (c *ReserveRoomClient) Use(hooks ...Hook) {
	c.hooks.ReserveRoom = append(c.hooks.ReserveRoom, hooks...)
}

// Create returns a create builder for ReserveRoom.
func (c *ReserveRoomClient) Create() *ReserveRoomCreate {
	mutation := newReserveRoomMutation(c.config, OpCreate)
	return &ReserveRoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for ReserveRoom.
func (c *ReserveRoomClient) Update() *ReserveRoomUpdate {
	mutation := newReserveRoomMutation(c.config, OpUpdate)
	return &ReserveRoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReserveRoomClient) UpdateOne(rr *ReserveRoom) *ReserveRoomUpdateOne {
	mutation := newReserveRoomMutation(c.config, OpUpdateOne, withReserveRoom(rr))
	return &ReserveRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReserveRoomClient) UpdateOneID(id int) *ReserveRoomUpdateOne {
	mutation := newReserveRoomMutation(c.config, OpUpdateOne, withReserveRoomID(id))
	return &ReserveRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReserveRoom.
func (c *ReserveRoomClient) Delete() *ReserveRoomDelete {
	mutation := newReserveRoomMutation(c.config, OpDelete)
	return &ReserveRoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReserveRoomClient) DeleteOne(rr *ReserveRoom) *ReserveRoomDeleteOne {
	return c.DeleteOneID(rr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReserveRoomClient) DeleteOneID(id int) *ReserveRoomDeleteOne {
	builder := c.Delete().Where(reserveroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReserveRoomDeleteOne{builder}
}

// Create returns a query builder for ReserveRoom.
func (c *ReserveRoomClient) Query() *ReserveRoomQuery {
	return &ReserveRoomQuery{config: c.config}
}

// Get returns a ReserveRoom entity by its id.
func (c *ReserveRoomClient) Get(ctx context.Context, id int) (*ReserveRoom, error) {
	return c.Query().Where(reserveroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReserveRoomClient) GetX(ctx context.Context, id int) *ReserveRoom {
	rr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rr
}

// QueryCustomer queries the customer edge of a ReserveRoom.
func (c *ReserveRoomClient) QueryCustomer(rr *ReserveRoom) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserveroom.Table, reserveroom.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reserveroom.CustomerTable, reserveroom.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPromotion queries the promotion edge of a ReserveRoom.
func (c *ReserveRoomClient) QueryPromotion(rr *ReserveRoom) *PromotionQuery {
	query := &PromotionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserveroom.Table, reserveroom.FieldID, id),
			sqlgraph.To(promotion.Table, promotion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reserveroom.PromotionTable, reserveroom.PromotionColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoom queries the room edge of a ReserveRoom.
func (c *ReserveRoomClient) QueryRoom(rr *ReserveRoom) *DataRoomQuery {
	query := &DataRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserveroom.Table, reserveroom.FieldID, id),
			sqlgraph.To(dataroom.Table, dataroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reserveroom.RoomTable, reserveroom.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatus queries the status edge of a ReserveRoom.
func (c *ReserveRoomClient) QueryStatus(rr *ReserveRoom) *StatusReserveQuery {
	query := &StatusReserveQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserveroom.Table, reserveroom.FieldID, id),
			sqlgraph.To(statusreserve.Table, statusreserve.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reserveroom.StatusTable, reserveroom.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckins queries the checkins edge of a ReserveRoom.
func (c *ReserveRoomClient) QueryCheckins(rr *ReserveRoom) *CheckInQuery {
	query := &CheckInQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserveroom.Table, reserveroom.FieldID, id),
			sqlgraph.To(checkin.Table, checkin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, reserveroom.CheckinsTable, reserveroom.CheckinsColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReserveRoomClient) Hooks() []Hook {
	return c.hooks.ReserveRoom
}

// StatusClient is a client for the Status schema.
type StatusClient struct {
	config
}

// NewStatusClient returns a client for the Status from the given config.
func NewStatusClient(c config) *StatusClient {
	return &StatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `status.Hooks(f(g(h())))`.
func (c *StatusClient) Use(hooks ...Hook) {
	c.hooks.Status = append(c.hooks.Status, hooks...)
}

// Create returns a create builder for Status.
func (c *StatusClient) Create() *StatusCreate {
	mutation := newStatusMutation(c.config, OpCreate)
	return &StatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Status.
func (c *StatusClient) Update() *StatusUpdate {
	mutation := newStatusMutation(c.config, OpUpdate)
	return &StatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusClient) UpdateOne(s *Status) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatus(s))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusClient) UpdateOneID(id int) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatusID(id))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Status.
func (c *StatusClient) Delete() *StatusDelete {
	mutation := newStatusMutation(c.config, OpDelete)
	return &StatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusClient) DeleteOne(s *Status) *StatusDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusClient) DeleteOneID(id int) *StatusDeleteOne {
	builder := c.Delete().Where(status.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusDeleteOne{builder}
}

// Create returns a query builder for Status.
func (c *StatusClient) Query() *StatusQuery {
	return &StatusQuery{config: c.config}
}

// Get returns a Status entity by its id.
func (c *StatusClient) Get(ctx context.Context, id int) (*Status, error) {
	return c.Query().Where(status.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusClient) GetX(ctx context.Context, id int) *Status {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryCheckouts queries the checkouts edge of a Status.
func (c *StatusClient) QueryCheckouts(s *Status) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, status.CheckoutsTable, status.CheckoutsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusClient) Hooks() []Hook {
	return c.hooks.Status
}

// StatusCheckInClient is a client for the StatusCheckIn schema.
type StatusCheckInClient struct {
	config
}

// NewStatusCheckInClient returns a client for the StatusCheckIn from the given config.
func NewStatusCheckInClient(c config) *StatusCheckInClient {
	return &StatusCheckInClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statuscheckin.Hooks(f(g(h())))`.
func (c *StatusCheckInClient) Use(hooks ...Hook) {
	c.hooks.StatusCheckIn = append(c.hooks.StatusCheckIn, hooks...)
}

// Create returns a create builder for StatusCheckIn.
func (c *StatusCheckInClient) Create() *StatusCheckInCreate {
	mutation := newStatusCheckInMutation(c.config, OpCreate)
	return &StatusCheckInCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for StatusCheckIn.
func (c *StatusCheckInClient) Update() *StatusCheckInUpdate {
	mutation := newStatusCheckInMutation(c.config, OpUpdate)
	return &StatusCheckInUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusCheckInClient) UpdateOne(sci *StatusCheckIn) *StatusCheckInUpdateOne {
	mutation := newStatusCheckInMutation(c.config, OpUpdateOne, withStatusCheckIn(sci))
	return &StatusCheckInUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusCheckInClient) UpdateOneID(id int) *StatusCheckInUpdateOne {
	mutation := newStatusCheckInMutation(c.config, OpUpdateOne, withStatusCheckInID(id))
	return &StatusCheckInUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusCheckIn.
func (c *StatusCheckInClient) Delete() *StatusCheckInDelete {
	mutation := newStatusCheckInMutation(c.config, OpDelete)
	return &StatusCheckInDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusCheckInClient) DeleteOne(sci *StatusCheckIn) *StatusCheckInDeleteOne {
	return c.DeleteOneID(sci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusCheckInClient) DeleteOneID(id int) *StatusCheckInDeleteOne {
	builder := c.Delete().Where(statuscheckin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusCheckInDeleteOne{builder}
}

// Create returns a query builder for StatusCheckIn.
func (c *StatusCheckInClient) Query() *StatusCheckInQuery {
	return &StatusCheckInQuery{config: c.config}
}

// Get returns a StatusCheckIn entity by its id.
func (c *StatusCheckInClient) Get(ctx context.Context, id int) (*StatusCheckIn, error) {
	return c.Query().Where(statuscheckin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusCheckInClient) GetX(ctx context.Context, id int) *StatusCheckIn {
	sci, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return sci
}

// QueryCheckins queries the checkins edge of a StatusCheckIn.
func (c *StatusCheckInClient) QueryCheckins(sci *StatusCheckIn) *CheckInQuery {
	query := &CheckInQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statuscheckin.Table, statuscheckin.FieldID, id),
			sqlgraph.To(checkin.Table, checkin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statuscheckin.CheckinsTable, statuscheckin.CheckinsColumn),
		)
		fromV = sqlgraph.Neighbors(sci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusCheckInClient) Hooks() []Hook {
	return c.hooks.StatusCheckIn
}

// StatusOpinionClient is a client for the StatusOpinion schema.
type StatusOpinionClient struct {
	config
}

// NewStatusOpinionClient returns a client for the StatusOpinion from the given config.
func NewStatusOpinionClient(c config) *StatusOpinionClient {
	return &StatusOpinionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusopinion.Hooks(f(g(h())))`.
func (c *StatusOpinionClient) Use(hooks ...Hook) {
	c.hooks.StatusOpinion = append(c.hooks.StatusOpinion, hooks...)
}

// Create returns a create builder for StatusOpinion.
func (c *StatusOpinionClient) Create() *StatusOpinionCreate {
	mutation := newStatusOpinionMutation(c.config, OpCreate)
	return &StatusOpinionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for StatusOpinion.
func (c *StatusOpinionClient) Update() *StatusOpinionUpdate {
	mutation := newStatusOpinionMutation(c.config, OpUpdate)
	return &StatusOpinionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusOpinionClient) UpdateOne(so *StatusOpinion) *StatusOpinionUpdateOne {
	mutation := newStatusOpinionMutation(c.config, OpUpdateOne, withStatusOpinion(so))
	return &StatusOpinionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusOpinionClient) UpdateOneID(id int) *StatusOpinionUpdateOne {
	mutation := newStatusOpinionMutation(c.config, OpUpdateOne, withStatusOpinionID(id))
	return &StatusOpinionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusOpinion.
func (c *StatusOpinionClient) Delete() *StatusOpinionDelete {
	mutation := newStatusOpinionMutation(c.config, OpDelete)
	return &StatusOpinionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusOpinionClient) DeleteOne(so *StatusOpinion) *StatusOpinionDeleteOne {
	return c.DeleteOneID(so.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusOpinionClient) DeleteOneID(id int) *StatusOpinionDeleteOne {
	builder := c.Delete().Where(statusopinion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusOpinionDeleteOne{builder}
}

// Create returns a query builder for StatusOpinion.
func (c *StatusOpinionClient) Query() *StatusOpinionQuery {
	return &StatusOpinionQuery{config: c.config}
}

// Get returns a StatusOpinion entity by its id.
func (c *StatusOpinionClient) Get(ctx context.Context, id int) (*StatusOpinion, error) {
	return c.Query().Where(statusopinion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusOpinionClient) GetX(ctx context.Context, id int) *StatusOpinion {
	so, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return so
}

// QueryCheckouts queries the checkouts edge of a StatusOpinion.
func (c *StatusOpinionClient) QueryCheckouts(so *StatusOpinion) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := so.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusopinion.Table, statusopinion.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusopinion.CheckoutsTable, statusopinion.CheckoutsColumn),
		)
		fromV = sqlgraph.Neighbors(so.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusOpinionClient) Hooks() []Hook {
	return c.hooks.StatusOpinion
}

// StatusReserveClient is a client for the StatusReserve schema.
type StatusReserveClient struct {
	config
}

// NewStatusReserveClient returns a client for the StatusReserve from the given config.
func NewStatusReserveClient(c config) *StatusReserveClient {
	return &StatusReserveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusreserve.Hooks(f(g(h())))`.
func (c *StatusReserveClient) Use(hooks ...Hook) {
	c.hooks.StatusReserve = append(c.hooks.StatusReserve, hooks...)
}

// Create returns a create builder for StatusReserve.
func (c *StatusReserveClient) Create() *StatusReserveCreate {
	mutation := newStatusReserveMutation(c.config, OpCreate)
	return &StatusReserveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for StatusReserve.
func (c *StatusReserveClient) Update() *StatusReserveUpdate {
	mutation := newStatusReserveMutation(c.config, OpUpdate)
	return &StatusReserveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusReserveClient) UpdateOne(sr *StatusReserve) *StatusReserveUpdateOne {
	mutation := newStatusReserveMutation(c.config, OpUpdateOne, withStatusReserve(sr))
	return &StatusReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusReserveClient) UpdateOneID(id int) *StatusReserveUpdateOne {
	mutation := newStatusReserveMutation(c.config, OpUpdateOne, withStatusReserveID(id))
	return &StatusReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusReserve.
func (c *StatusReserveClient) Delete() *StatusReserveDelete {
	mutation := newStatusReserveMutation(c.config, OpDelete)
	return &StatusReserveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusReserveClient) DeleteOne(sr *StatusReserve) *StatusReserveDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusReserveClient) DeleteOneID(id int) *StatusReserveDeleteOne {
	builder := c.Delete().Where(statusreserve.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusReserveDeleteOne{builder}
}

// Create returns a query builder for StatusReserve.
func (c *StatusReserveClient) Query() *StatusReserveQuery {
	return &StatusReserveQuery{config: c.config}
}

// Get returns a StatusReserve entity by its id.
func (c *StatusReserveClient) Get(ctx context.Context, id int) (*StatusReserve, error) {
	return c.Query().Where(statusreserve.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusReserveClient) GetX(ctx context.Context, id int) *StatusReserve {
	sr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return sr
}

// QueryReserves queries the reserves edge of a StatusReserve.
func (c *StatusReserveClient) QueryReserves(sr *StatusReserve) *ReserveRoomQuery {
	query := &ReserveRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusreserve.Table, statusreserve.FieldID, id),
			sqlgraph.To(reserveroom.Table, reserveroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusreserve.ReservesTable, statusreserve.ReservesColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusReserveClient) Hooks() []Hook {
	return c.hooks.StatusReserve
}

// StatusRoomClient is a client for the StatusRoom schema.
type StatusRoomClient struct {
	config
}

// NewStatusRoomClient returns a client for the StatusRoom from the given config.
func NewStatusRoomClient(c config) *StatusRoomClient {
	return &StatusRoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statusroom.Hooks(f(g(h())))`.
func (c *StatusRoomClient) Use(hooks ...Hook) {
	c.hooks.StatusRoom = append(c.hooks.StatusRoom, hooks...)
}

// Create returns a create builder for StatusRoom.
func (c *StatusRoomClient) Create() *StatusRoomCreate {
	mutation := newStatusRoomMutation(c.config, OpCreate)
	return &StatusRoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for StatusRoom.
func (c *StatusRoomClient) Update() *StatusRoomUpdate {
	mutation := newStatusRoomMutation(c.config, OpUpdate)
	return &StatusRoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusRoomClient) UpdateOne(sr *StatusRoom) *StatusRoomUpdateOne {
	mutation := newStatusRoomMutation(c.config, OpUpdateOne, withStatusRoom(sr))
	return &StatusRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusRoomClient) UpdateOneID(id int) *StatusRoomUpdateOne {
	mutation := newStatusRoomMutation(c.config, OpUpdateOne, withStatusRoomID(id))
	return &StatusRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusRoom.
func (c *StatusRoomClient) Delete() *StatusRoomDelete {
	mutation := newStatusRoomMutation(c.config, OpDelete)
	return &StatusRoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusRoomClient) DeleteOne(sr *StatusRoom) *StatusRoomDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusRoomClient) DeleteOneID(id int) *StatusRoomDeleteOne {
	builder := c.Delete().Where(statusroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusRoomDeleteOne{builder}
}

// Create returns a query builder for StatusRoom.
func (c *StatusRoomClient) Query() *StatusRoomQuery {
	return &StatusRoomQuery{config: c.config}
}

// Get returns a StatusRoom entity by its id.
func (c *StatusRoomClient) Get(ctx context.Context, id int) (*StatusRoom, error) {
	return c.Query().Where(statusroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusRoomClient) GetX(ctx context.Context, id int) *StatusRoom {
	sr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return sr
}

// QueryDatarooms queries the datarooms edge of a StatusRoom.
func (c *StatusRoomClient) QueryDatarooms(sr *StatusRoom) *DataRoomQuery {
	query := &DataRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statusroom.Table, statusroom.FieldID, id),
			sqlgraph.To(dataroom.Table, dataroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statusroom.DataroomsTable, statusroom.DataroomsColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusRoomClient) Hooks() []Hook {
	return c.hooks.StatusRoom
}

// TypeRoomClient is a client for the TypeRoom schema.
type TypeRoomClient struct {
	config
}

// NewTypeRoomClient returns a client for the TypeRoom from the given config.
func NewTypeRoomClient(c config) *TypeRoomClient {
	return &TypeRoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `typeroom.Hooks(f(g(h())))`.
func (c *TypeRoomClient) Use(hooks ...Hook) {
	c.hooks.TypeRoom = append(c.hooks.TypeRoom, hooks...)
}

// Create returns a create builder for TypeRoom.
func (c *TypeRoomClient) Create() *TypeRoomCreate {
	mutation := newTypeRoomMutation(c.config, OpCreate)
	return &TypeRoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for TypeRoom.
func (c *TypeRoomClient) Update() *TypeRoomUpdate {
	mutation := newTypeRoomMutation(c.config, OpUpdate)
	return &TypeRoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TypeRoomClient) UpdateOne(tr *TypeRoom) *TypeRoomUpdateOne {
	mutation := newTypeRoomMutation(c.config, OpUpdateOne, withTypeRoom(tr))
	return &TypeRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TypeRoomClient) UpdateOneID(id int) *TypeRoomUpdateOne {
	mutation := newTypeRoomMutation(c.config, OpUpdateOne, withTypeRoomID(id))
	return &TypeRoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TypeRoom.
func (c *TypeRoomClient) Delete() *TypeRoomDelete {
	mutation := newTypeRoomMutation(c.config, OpDelete)
	return &TypeRoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TypeRoomClient) DeleteOne(tr *TypeRoom) *TypeRoomDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TypeRoomClient) DeleteOneID(id int) *TypeRoomDeleteOne {
	builder := c.Delete().Where(typeroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TypeRoomDeleteOne{builder}
}

// Create returns a query builder for TypeRoom.
func (c *TypeRoomClient) Query() *TypeRoomQuery {
	return &TypeRoomQuery{config: c.config}
}

// Get returns a TypeRoom entity by its id.
func (c *TypeRoomClient) Get(ctx context.Context, id int) (*TypeRoom, error) {
	return c.Query().Where(typeroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TypeRoomClient) GetX(ctx context.Context, id int) *TypeRoom {
	tr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return tr
}

// QueryDatarooms queries the datarooms edge of a TypeRoom.
func (c *TypeRoomClient) QueryDatarooms(tr *TypeRoom) *DataRoomQuery {
	query := &DataRoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(typeroom.Table, typeroom.FieldID, id),
			sqlgraph.To(dataroom.Table, dataroom.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, typeroom.DataroomsTable, typeroom.DataroomsColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TypeRoomClient) Hooks() []Hook {
	return c.hooks.TypeRoom
}
