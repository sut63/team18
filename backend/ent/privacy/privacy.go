// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"context"
	"errors"
	"fmt"

	"github.com/team18/app/ent"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = errors.New("ent/privacy: allow rule")

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = errors.New("ent/privacy: deny rule")

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = errors.New("ent/privacy: skip rule")
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

type decisionCtxKey struct{}

// DecisionContext creates a decision context.
func DecisionContext(parent context.Context, decision error) context.Context {
	if decision == nil || errors.Is(decision, Skip) {
		return parent
	}
	return context.WithValue(parent, decisionCtxKey{}, decision)
}

func decisionFromContext(ctx context.Context) (error, bool) {
	decision, ok := ctx.Value(decisionCtxKey{}).(error)
	if ok && errors.Is(decision, Allow) {
		decision = nil
	}
	return decision, ok
}

type (
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy []QueryRule

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule interface {
		EvalQuery(context.Context, ent.Query) error
	}
)

// EvalQuery evaluates a query against a query policy.
func (policy QueryPolicy) EvalQuery(ctx context.Context, q ent.Query) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalQuery(ctx, q); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

type (
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy []MutationRule

	// MutationRule defines the interface deciding whether a
	// mutation is allowed and optionally modify it.
	MutationRule interface {
		EvalMutation(context.Context, ent.Mutation) error
	}
)

// EvalMutation evaluates a mutation against a mutation policy.
func (policy MutationPolicy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalMutation(ctx, m); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// MutationRuleFunc type is an adapter to allow the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// Policy groups query and mutation policies.
type Policy struct {
	Query    QueryPolicy
	Mutation MutationPolicy
}

// EvalQuery forwards evaluation to query policy.
func (policy Policy) EvalQuery(ctx context.Context, q ent.Query) error {
	return policy.Query.EvalQuery(ctx, q)
}

// EvalMutation forwards evaluation to mutation policy.
func (policy Policy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return policy.Mutation.EvalMutation(ctx, m)
}

// QueryMutationRule is the interface that groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The CheckInQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CheckInQueryRuleFunc func(context.Context, *ent.CheckInQuery) error

// EvalQuery return f(ctx, q).
func (f CheckInQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CheckInQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CheckInQuery", q)
}

// The CheckInMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CheckInMutationRuleFunc func(context.Context, *ent.CheckInMutation) error

// EvalMutation calls f(ctx, m).
func (f CheckInMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CheckInMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CheckInMutation", m)
}

// The CheckoutQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CheckoutQueryRuleFunc func(context.Context, *ent.CheckoutQuery) error

// EvalQuery return f(ctx, q).
func (f CheckoutQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CheckoutQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CheckoutQuery", q)
}

// The CheckoutMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CheckoutMutationRuleFunc func(context.Context, *ent.CheckoutMutation) error

// EvalMutation calls f(ctx, m).
func (f CheckoutMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CheckoutMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CheckoutMutation", m)
}

// The CounterStaffQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CounterStaffQueryRuleFunc func(context.Context, *ent.CounterStaffQuery) error

// EvalQuery return f(ctx, q).
func (f CounterStaffQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CounterStaffQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CounterStaffQuery", q)
}

// The CounterStaffMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CounterStaffMutationRuleFunc func(context.Context, *ent.CounterStaffMutation) error

// EvalMutation calls f(ctx, m).
func (f CounterStaffMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CounterStaffMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CounterStaffMutation", m)
}

// The CustomerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CustomerQueryRuleFunc func(context.Context, *ent.CustomerQuery) error

// EvalQuery return f(ctx, q).
func (f CustomerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CustomerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CustomerQuery", q)
}

// The CustomerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CustomerMutationRuleFunc func(context.Context, *ent.CustomerMutation) error

// EvalMutation calls f(ctx, m).
func (f CustomerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CustomerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CustomerMutation", m)
}

// The DataRoomQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DataRoomQueryRuleFunc func(context.Context, *ent.DataRoomQuery) error

// EvalQuery return f(ctx, q).
func (f DataRoomQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DataRoomQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DataRoomQuery", q)
}

// The DataRoomMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DataRoomMutationRuleFunc func(context.Context, *ent.DataRoomMutation) error

// EvalMutation calls f(ctx, m).
func (f DataRoomMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DataRoomMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DataRoomMutation", m)
}

// The FixRoomQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FixRoomQueryRuleFunc func(context.Context, *ent.FixRoomQuery) error

// EvalQuery return f(ctx, q).
func (f FixRoomQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FixRoomQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FixRoomQuery", q)
}

// The FixRoomMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FixRoomMutationRuleFunc func(context.Context, *ent.FixRoomMutation) error

// EvalMutation calls f(ctx, m).
func (f FixRoomMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FixRoomMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FixRoomMutation", m)
}

// The FurnitureQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FurnitureQueryRuleFunc func(context.Context, *ent.FurnitureQuery) error

// EvalQuery return f(ctx, q).
func (f FurnitureQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FurnitureQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FurnitureQuery", q)
}

// The FurnitureMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FurnitureMutationRuleFunc func(context.Context, *ent.FurnitureMutation) error

// EvalMutation calls f(ctx, m).
func (f FurnitureMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FurnitureMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FurnitureMutation", m)
}

// The FurnitureDetailQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FurnitureDetailQueryRuleFunc func(context.Context, *ent.FurnitureDetailQuery) error

// EvalQuery return f(ctx, q).
func (f FurnitureDetailQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FurnitureDetailQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FurnitureDetailQuery", q)
}

// The FurnitureDetailMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FurnitureDetailMutationRuleFunc func(context.Context, *ent.FurnitureDetailMutation) error

// EvalMutation calls f(ctx, m).
func (f FurnitureDetailMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FurnitureDetailMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FurnitureDetailMutation", m)
}

// The FurnitureTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FurnitureTypeQueryRuleFunc func(context.Context, *ent.FurnitureTypeQuery) error

// EvalQuery return f(ctx, q).
func (f FurnitureTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FurnitureTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FurnitureTypeQuery", q)
}

// The FurnitureTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FurnitureTypeMutationRuleFunc func(context.Context, *ent.FurnitureTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f FurnitureTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FurnitureTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FurnitureTypeMutation", m)
}

// The PromotionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PromotionQueryRuleFunc func(context.Context, *ent.PromotionQuery) error

// EvalQuery return f(ctx, q).
func (f PromotionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PromotionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PromotionQuery", q)
}

// The PromotionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PromotionMutationRuleFunc func(context.Context, *ent.PromotionMutation) error

// EvalMutation calls f(ctx, m).
func (f PromotionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PromotionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PromotionMutation", m)
}

// The ReserveRoomQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReserveRoomQueryRuleFunc func(context.Context, *ent.ReserveRoomQuery) error

// EvalQuery return f(ctx, q).
func (f ReserveRoomQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReserveRoomQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReserveRoomQuery", q)
}

// The ReserveRoomMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReserveRoomMutationRuleFunc func(context.Context, *ent.ReserveRoomMutation) error

// EvalMutation calls f(ctx, m).
func (f ReserveRoomMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReserveRoomMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReserveRoomMutation", m)
}

// The StatusQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StatusQueryRuleFunc func(context.Context, *ent.StatusQuery) error

// EvalQuery return f(ctx, q).
func (f StatusQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatusQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StatusQuery", q)
}

// The StatusMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StatusMutationRuleFunc func(context.Context, *ent.StatusMutation) error

// EvalMutation calls f(ctx, m).
func (f StatusMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StatusMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StatusMutation", m)
}

// The StatusReserveQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StatusReserveQueryRuleFunc func(context.Context, *ent.StatusReserveQuery) error

// EvalQuery return f(ctx, q).
func (f StatusReserveQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatusReserveQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StatusReserveQuery", q)
}

// The StatusReserveMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StatusReserveMutationRuleFunc func(context.Context, *ent.StatusReserveMutation) error

// EvalMutation calls f(ctx, m).
func (f StatusReserveMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StatusReserveMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StatusReserveMutation", m)
}

// The StatusRoomQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StatusRoomQueryRuleFunc func(context.Context, *ent.StatusRoomQuery) error

// EvalQuery return f(ctx, q).
func (f StatusRoomQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StatusRoomQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StatusRoomQuery", q)
}

// The StatusRoomMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StatusRoomMutationRuleFunc func(context.Context, *ent.StatusRoomMutation) error

// EvalMutation calls f(ctx, m).
func (f StatusRoomMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StatusRoomMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StatusRoomMutation", m)
}

// The TypeRoomQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TypeRoomQueryRuleFunc func(context.Context, *ent.TypeRoomQuery) error

// EvalQuery return f(ctx, q).
func (f TypeRoomQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TypeRoomQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TypeRoomQuery", q)
}

// The TypeRoomMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TypeRoomMutationRuleFunc func(context.Context, *ent.TypeRoomMutation) error

// EvalMutation calls f(ctx, m).
func (f TypeRoomMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TypeRoomMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TypeRoomMutation", m)
}
