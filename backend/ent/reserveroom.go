// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team18/app/ent/customer"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/promotion"
	"github.com/team18/app/ent/reserveroom"
	"github.com/team18/app/ent/statusreserve"
)

// ReserveRoom is the model entity for the ReserveRoom schema.
type ReserveRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReserveDate holds the value of the "reserve_date" field.
	ReserveDate time.Time `json:"reserve_date,omitempty"`
	// DateOut holds the value of the "date_out" field.
	DateOut time.Time `json:"date_out,omitempty"`
	// NetPrice holds the value of the "net_price" field.
	NetPrice float64 `json:"net_price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReserveRoomQuery when eager-loading is set.
	Edges        ReserveRoomEdges `json:"edges"`
	customer_id  *int
	room_id      *int
	promotion_id *int
	status_id    *int
}

// ReserveRoomEdges holds the relations/edges for other nodes in the graph.
type ReserveRoomEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer
	// Promotion holds the value of the promotion edge.
	Promotion *Promotion
	// Room holds the value of the room edge.
	Room *DataRoom
	// Status holds the value of the status edge.
	Status *StatusReserve
	// Checkins holds the value of the checkins edge.
	Checkins []*CheckIn
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReserveRoomEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// PromotionOrErr returns the Promotion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReserveRoomEdges) PromotionOrErr() (*Promotion, error) {
	if e.loadedTypes[1] {
		if e.Promotion == nil {
			// The edge promotion was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: promotion.Label}
		}
		return e.Promotion, nil
	}
	return nil, &NotLoadedError{edge: "promotion"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReserveRoomEdges) RoomOrErr() (*DataRoom, error) {
	if e.loadedTypes[2] {
		if e.Room == nil {
			// The edge room was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dataroom.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReserveRoomEdges) StatusOrErr() (*StatusReserve, error) {
	if e.loadedTypes[3] {
		if e.Status == nil {
			// The edge status was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statusreserve.Label}
		}
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "status"}
}

// CheckinsOrErr returns the Checkins value or an error if the edge
// was not loaded in eager-loading.
func (e ReserveRoomEdges) CheckinsOrErr() ([]*CheckIn, error) {
	if e.loadedTypes[4] {
		return e.Checkins, nil
	}
	return nil, &NotLoadedError{edge: "checkins"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReserveRoom) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullTime{},    // reserve_date
		&sql.NullTime{},    // date_out
		&sql.NullFloat64{}, // net_price
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ReserveRoom) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // customer_id
		&sql.NullInt64{}, // room_id
		&sql.NullInt64{}, // promotion_id
		&sql.NullInt64{}, // status_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReserveRoom fields.
func (rr *ReserveRoom) assignValues(values ...interface{}) error {
	if m, n := len(values), len(reserveroom.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	rr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field reserve_date", values[0])
	} else if value.Valid {
		rr.ReserveDate = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date_out", values[1])
	} else if value.Valid {
		rr.DateOut = value.Time
	}
	if value, ok := values[2].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field net_price", values[2])
	} else if value.Valid {
		rr.NetPrice = value.Float64
	}
	values = values[3:]
	if len(values) == len(reserveroom.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field customer_id", value)
		} else if value.Valid {
			rr.customer_id = new(int)
			*rr.customer_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_id", value)
		} else if value.Valid {
			rr.room_id = new(int)
			*rr.room_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field promotion_id", value)
		} else if value.Valid {
			rr.promotion_id = new(int)
			*rr.promotion_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field status_id", value)
		} else if value.Valid {
			rr.status_id = new(int)
			*rr.status_id = int(value.Int64)
		}
	}
	return nil
}

// QueryCustomer queries the customer edge of the ReserveRoom.
func (rr *ReserveRoom) QueryCustomer() *CustomerQuery {
	return (&ReserveRoomClient{config: rr.config}).QueryCustomer(rr)
}

// QueryPromotion queries the promotion edge of the ReserveRoom.
func (rr *ReserveRoom) QueryPromotion() *PromotionQuery {
	return (&ReserveRoomClient{config: rr.config}).QueryPromotion(rr)
}

// QueryRoom queries the room edge of the ReserveRoom.
func (rr *ReserveRoom) QueryRoom() *DataRoomQuery {
	return (&ReserveRoomClient{config: rr.config}).QueryRoom(rr)
}

// QueryStatus queries the status edge of the ReserveRoom.
func (rr *ReserveRoom) QueryStatus() *StatusReserveQuery {
	return (&ReserveRoomClient{config: rr.config}).QueryStatus(rr)
}

// QueryCheckins queries the checkins edge of the ReserveRoom.
func (rr *ReserveRoom) QueryCheckins() *CheckInQuery {
	return (&ReserveRoomClient{config: rr.config}).QueryCheckins(rr)
}

// Update returns a builder for updating this ReserveRoom.
// Note that, you need to call ReserveRoom.Unwrap() before calling this method, if this ReserveRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (rr *ReserveRoom) Update() *ReserveRoomUpdateOne {
	return (&ReserveRoomClient{config: rr.config}).UpdateOne(rr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (rr *ReserveRoom) Unwrap() *ReserveRoom {
	tx, ok := rr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReserveRoom is not a transactional entity")
	}
	rr.config.driver = tx.drv
	return rr
}

// String implements the fmt.Stringer.
func (rr *ReserveRoom) String() string {
	var builder strings.Builder
	builder.WriteString("ReserveRoom(")
	builder.WriteString(fmt.Sprintf("id=%v", rr.ID))
	builder.WriteString(", reserve_date=")
	builder.WriteString(rr.ReserveDate.Format(time.ANSIC))
	builder.WriteString(", date_out=")
	builder.WriteString(rr.DateOut.Format(time.ANSIC))
	builder.WriteString(", net_price=")
	builder.WriteString(fmt.Sprintf("%v", rr.NetPrice))
	builder.WriteByte(')')
	return builder.String()
}

// ReserveRooms is a parsable slice of ReserveRoom.
type ReserveRooms []*ReserveRoom

func (rr ReserveRooms) config(cfg config) {
	for _i := range rr {
		rr[_i].config = cfg
	}
}
