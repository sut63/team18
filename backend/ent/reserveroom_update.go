// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkin"
	"github.com/team18/app/ent/customer"
	"github.com/team18/app/ent/dataroom"
	"github.com/team18/app/ent/predicate"
	"github.com/team18/app/ent/promotion"
	"github.com/team18/app/ent/reserveroom"
	"github.com/team18/app/ent/statusreserve"
)

// ReserveRoomUpdate is the builder for updating ReserveRoom entities.
type ReserveRoomUpdate struct {
	config
	hooks      []Hook
	mutation   *ReserveRoomMutation
	predicates []predicate.ReserveRoom
}

// Where adds a new predicate for the builder.
func (rru *ReserveRoomUpdate) Where(ps ...predicate.ReserveRoom) *ReserveRoomUpdate {
	rru.predicates = append(rru.predicates, ps...)
	return rru
}

// SetReserveDate sets the reserve_date field.
func (rru *ReserveRoomUpdate) SetReserveDate(t time.Time) *ReserveRoomUpdate {
	rru.mutation.SetReserveDate(t)
	return rru
}

// SetRequest sets the request field.
func (rru *ReserveRoomUpdate) SetRequest(s string) *ReserveRoomUpdate {
	rru.mutation.SetRequest(s)
	return rru
}

// SetAmount sets the amount field.
func (rru *ReserveRoomUpdate) SetAmount(i int) *ReserveRoomUpdate {
	rru.mutation.ResetAmount()
	rru.mutation.SetAmount(i)
	return rru
}

// AddAmount adds i to amount.
func (rru *ReserveRoomUpdate) AddAmount(i int) *ReserveRoomUpdate {
	rru.mutation.AddAmount(i)
	return rru
}

// SetPhoneNumber sets the phone_number field.
func (rru *ReserveRoomUpdate) SetPhoneNumber(s string) *ReserveRoomUpdate {
	rru.mutation.SetPhoneNumber(s)
	return rru
}

// SetNetPrice sets the net_price field.
func (rru *ReserveRoomUpdate) SetNetPrice(f float64) *ReserveRoomUpdate {
	rru.mutation.ResetNetPrice()
	rru.mutation.SetNetPrice(f)
	return rru
}

// AddNetPrice adds f to net_price.
func (rru *ReserveRoomUpdate) AddNetPrice(f float64) *ReserveRoomUpdate {
	rru.mutation.AddNetPrice(f)
	return rru
}

// SetCustomerID sets the customer edge to Customer by id.
func (rru *ReserveRoomUpdate) SetCustomerID(id int) *ReserveRoomUpdate {
	rru.mutation.SetCustomerID(id)
	return rru
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (rru *ReserveRoomUpdate) SetNillableCustomerID(id *int) *ReserveRoomUpdate {
	if id != nil {
		rru = rru.SetCustomerID(*id)
	}
	return rru
}

// SetCustomer sets the customer edge to Customer.
func (rru *ReserveRoomUpdate) SetCustomer(c *Customer) *ReserveRoomUpdate {
	return rru.SetCustomerID(c.ID)
}

// SetPromotionID sets the promotion edge to Promotion by id.
func (rru *ReserveRoomUpdate) SetPromotionID(id int) *ReserveRoomUpdate {
	rru.mutation.SetPromotionID(id)
	return rru
}

// SetNillablePromotionID sets the promotion edge to Promotion by id if the given value is not nil.
func (rru *ReserveRoomUpdate) SetNillablePromotionID(id *int) *ReserveRoomUpdate {
	if id != nil {
		rru = rru.SetPromotionID(*id)
	}
	return rru
}

// SetPromotion sets the promotion edge to Promotion.
func (rru *ReserveRoomUpdate) SetPromotion(p *Promotion) *ReserveRoomUpdate {
	return rru.SetPromotionID(p.ID)
}

// SetRoomID sets the room edge to DataRoom by id.
func (rru *ReserveRoomUpdate) SetRoomID(id int) *ReserveRoomUpdate {
	rru.mutation.SetRoomID(id)
	return rru
}

// SetNillableRoomID sets the room edge to DataRoom by id if the given value is not nil.
func (rru *ReserveRoomUpdate) SetNillableRoomID(id *int) *ReserveRoomUpdate {
	if id != nil {
		rru = rru.SetRoomID(*id)
	}
	return rru
}

// SetRoom sets the room edge to DataRoom.
func (rru *ReserveRoomUpdate) SetRoom(d *DataRoom) *ReserveRoomUpdate {
	return rru.SetRoomID(d.ID)
}

// SetStatusID sets the status edge to StatusReserve by id.
func (rru *ReserveRoomUpdate) SetStatusID(id int) *ReserveRoomUpdate {
	rru.mutation.SetStatusID(id)
	return rru
}

// SetNillableStatusID sets the status edge to StatusReserve by id if the given value is not nil.
func (rru *ReserveRoomUpdate) SetNillableStatusID(id *int) *ReserveRoomUpdate {
	if id != nil {
		rru = rru.SetStatusID(*id)
	}
	return rru
}

// SetStatus sets the status edge to StatusReserve.
func (rru *ReserveRoomUpdate) SetStatus(s *StatusReserve) *ReserveRoomUpdate {
	return rru.SetStatusID(s.ID)
}

// AddCheckinIDs adds the checkins edge to CheckIn by ids.
func (rru *ReserveRoomUpdate) AddCheckinIDs(ids ...int) *ReserveRoomUpdate {
	rru.mutation.AddCheckinIDs(ids...)
	return rru
}

// AddCheckins adds the checkins edges to CheckIn.
func (rru *ReserveRoomUpdate) AddCheckins(c ...*CheckIn) *ReserveRoomUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rru.AddCheckinIDs(ids...)
}

// Mutation returns the ReserveRoomMutation object of the builder.
func (rru *ReserveRoomUpdate) Mutation() *ReserveRoomMutation {
	return rru.mutation
}

// ClearCustomer clears the customer edge to Customer.
func (rru *ReserveRoomUpdate) ClearCustomer() *ReserveRoomUpdate {
	rru.mutation.ClearCustomer()
	return rru
}

// ClearPromotion clears the promotion edge to Promotion.
func (rru *ReserveRoomUpdate) ClearPromotion() *ReserveRoomUpdate {
	rru.mutation.ClearPromotion()
	return rru
}

// ClearRoom clears the room edge to DataRoom.
func (rru *ReserveRoomUpdate) ClearRoom() *ReserveRoomUpdate {
	rru.mutation.ClearRoom()
	return rru
}

// ClearStatus clears the status edge to StatusReserve.
func (rru *ReserveRoomUpdate) ClearStatus() *ReserveRoomUpdate {
	rru.mutation.ClearStatus()
	return rru
}

// RemoveCheckinIDs removes the checkins edge to CheckIn by ids.
func (rru *ReserveRoomUpdate) RemoveCheckinIDs(ids ...int) *ReserveRoomUpdate {
	rru.mutation.RemoveCheckinIDs(ids...)
	return rru
}

// RemoveCheckins removes checkins edges to CheckIn.
func (rru *ReserveRoomUpdate) RemoveCheckins(c ...*CheckIn) *ReserveRoomUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rru.RemoveCheckinIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (rru *ReserveRoomUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := rru.mutation.Request(); ok {
		if err := reserveroom.RequestValidator(v); err != nil {
			return 0, &ValidationError{Name: "request", err: fmt.Errorf("ent: validator failed for field \"request\": %w", err)}
		}
	}
	if v, ok := rru.mutation.Amount(); ok {
		if err := reserveroom.AmountValidator(v); err != nil {
			return 0, &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}
	if v, ok := rru.mutation.PhoneNumber(); ok {
		if err := reserveroom.PhoneNumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	if v, ok := rru.mutation.NetPrice(); ok {
		if err := reserveroom.NetPriceValidator(v); err != nil {
			return 0, &ValidationError{Name: "net_price", err: fmt.Errorf("ent: validator failed for field \"net_price\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(rru.hooks) == 0 {
		affected, err = rru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReserveRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rru.mutation = mutation
			affected, err = rru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rru.hooks) - 1; i >= 0; i-- {
			mut = rru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rru *ReserveRoomUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *ReserveRoomUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *ReserveRoomUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rru *ReserveRoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reserveroom.Table,
			Columns: reserveroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reserveroom.FieldID,
			},
		},
	}
	if ps := rru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rru.mutation.ReserveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reserveroom.FieldReserveDate,
		})
	}
	if value, ok := rru.mutation.Request(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reserveroom.FieldRequest,
		})
	}
	if value, ok := rru.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reserveroom.FieldAmount,
		})
	}
	if value, ok := rru.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reserveroom.FieldAmount,
		})
	}
	if value, ok := rru.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reserveroom.FieldPhoneNumber,
		})
	}
	if value, ok := rru.mutation.NetPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reserveroom.FieldNetPrice,
		})
	}
	if value, ok := rru.mutation.AddedNetPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reserveroom.FieldNetPrice,
		})
	}
	if rru.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.CustomerTable,
			Columns: []string{reserveroom.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.CustomerTable,
			Columns: []string{reserveroom.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.PromotionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.PromotionTable,
			Columns: []string{reserveroom.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.PromotionTable,
			Columns: []string{reserveroom.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.RoomTable,
			Columns: []string{reserveroom.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.RoomTable,
			Columns: []string{reserveroom.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.StatusTable,
			Columns: []string{reserveroom.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusreserve.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.StatusTable,
			Columns: []string{reserveroom.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusreserve.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := rru.mutation.RemovedCheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reserveroom.CheckinsTable,
			Columns: []string{reserveroom.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reserveroom.CheckinsTable,
			Columns: []string{reserveroom.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reserveroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ReserveRoomUpdateOne is the builder for updating a single ReserveRoom entity.
type ReserveRoomUpdateOne struct {
	config
	hooks    []Hook
	mutation *ReserveRoomMutation
}

// SetReserveDate sets the reserve_date field.
func (rruo *ReserveRoomUpdateOne) SetReserveDate(t time.Time) *ReserveRoomUpdateOne {
	rruo.mutation.SetReserveDate(t)
	return rruo
}

// SetRequest sets the request field.
func (rruo *ReserveRoomUpdateOne) SetRequest(s string) *ReserveRoomUpdateOne {
	rruo.mutation.SetRequest(s)
	return rruo
}

// SetAmount sets the amount field.
func (rruo *ReserveRoomUpdateOne) SetAmount(i int) *ReserveRoomUpdateOne {
	rruo.mutation.ResetAmount()
	rruo.mutation.SetAmount(i)
	return rruo
}

// AddAmount adds i to amount.
func (rruo *ReserveRoomUpdateOne) AddAmount(i int) *ReserveRoomUpdateOne {
	rruo.mutation.AddAmount(i)
	return rruo
}

// SetPhoneNumber sets the phone_number field.
func (rruo *ReserveRoomUpdateOne) SetPhoneNumber(s string) *ReserveRoomUpdateOne {
	rruo.mutation.SetPhoneNumber(s)
	return rruo
}

// SetNetPrice sets the net_price field.
func (rruo *ReserveRoomUpdateOne) SetNetPrice(f float64) *ReserveRoomUpdateOne {
	rruo.mutation.ResetNetPrice()
	rruo.mutation.SetNetPrice(f)
	return rruo
}

// AddNetPrice adds f to net_price.
func (rruo *ReserveRoomUpdateOne) AddNetPrice(f float64) *ReserveRoomUpdateOne {
	rruo.mutation.AddNetPrice(f)
	return rruo
}

// SetCustomerID sets the customer edge to Customer by id.
func (rruo *ReserveRoomUpdateOne) SetCustomerID(id int) *ReserveRoomUpdateOne {
	rruo.mutation.SetCustomerID(id)
	return rruo
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (rruo *ReserveRoomUpdateOne) SetNillableCustomerID(id *int) *ReserveRoomUpdateOne {
	if id != nil {
		rruo = rruo.SetCustomerID(*id)
	}
	return rruo
}

// SetCustomer sets the customer edge to Customer.
func (rruo *ReserveRoomUpdateOne) SetCustomer(c *Customer) *ReserveRoomUpdateOne {
	return rruo.SetCustomerID(c.ID)
}

// SetPromotionID sets the promotion edge to Promotion by id.
func (rruo *ReserveRoomUpdateOne) SetPromotionID(id int) *ReserveRoomUpdateOne {
	rruo.mutation.SetPromotionID(id)
	return rruo
}

// SetNillablePromotionID sets the promotion edge to Promotion by id if the given value is not nil.
func (rruo *ReserveRoomUpdateOne) SetNillablePromotionID(id *int) *ReserveRoomUpdateOne {
	if id != nil {
		rruo = rruo.SetPromotionID(*id)
	}
	return rruo
}

// SetPromotion sets the promotion edge to Promotion.
func (rruo *ReserveRoomUpdateOne) SetPromotion(p *Promotion) *ReserveRoomUpdateOne {
	return rruo.SetPromotionID(p.ID)
}

// SetRoomID sets the room edge to DataRoom by id.
func (rruo *ReserveRoomUpdateOne) SetRoomID(id int) *ReserveRoomUpdateOne {
	rruo.mutation.SetRoomID(id)
	return rruo
}

// SetNillableRoomID sets the room edge to DataRoom by id if the given value is not nil.
func (rruo *ReserveRoomUpdateOne) SetNillableRoomID(id *int) *ReserveRoomUpdateOne {
	if id != nil {
		rruo = rruo.SetRoomID(*id)
	}
	return rruo
}

// SetRoom sets the room edge to DataRoom.
func (rruo *ReserveRoomUpdateOne) SetRoom(d *DataRoom) *ReserveRoomUpdateOne {
	return rruo.SetRoomID(d.ID)
}

// SetStatusID sets the status edge to StatusReserve by id.
func (rruo *ReserveRoomUpdateOne) SetStatusID(id int) *ReserveRoomUpdateOne {
	rruo.mutation.SetStatusID(id)
	return rruo
}

// SetNillableStatusID sets the status edge to StatusReserve by id if the given value is not nil.
func (rruo *ReserveRoomUpdateOne) SetNillableStatusID(id *int) *ReserveRoomUpdateOne {
	if id != nil {
		rruo = rruo.SetStatusID(*id)
	}
	return rruo
}

// SetStatus sets the status edge to StatusReserve.
func (rruo *ReserveRoomUpdateOne) SetStatus(s *StatusReserve) *ReserveRoomUpdateOne {
	return rruo.SetStatusID(s.ID)
}

// AddCheckinIDs adds the checkins edge to CheckIn by ids.
func (rruo *ReserveRoomUpdateOne) AddCheckinIDs(ids ...int) *ReserveRoomUpdateOne {
	rruo.mutation.AddCheckinIDs(ids...)
	return rruo
}

// AddCheckins adds the checkins edges to CheckIn.
func (rruo *ReserveRoomUpdateOne) AddCheckins(c ...*CheckIn) *ReserveRoomUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rruo.AddCheckinIDs(ids...)
}

// Mutation returns the ReserveRoomMutation object of the builder.
func (rruo *ReserveRoomUpdateOne) Mutation() *ReserveRoomMutation {
	return rruo.mutation
}

// ClearCustomer clears the customer edge to Customer.
func (rruo *ReserveRoomUpdateOne) ClearCustomer() *ReserveRoomUpdateOne {
	rruo.mutation.ClearCustomer()
	return rruo
}

// ClearPromotion clears the promotion edge to Promotion.
func (rruo *ReserveRoomUpdateOne) ClearPromotion() *ReserveRoomUpdateOne {
	rruo.mutation.ClearPromotion()
	return rruo
}

// ClearRoom clears the room edge to DataRoom.
func (rruo *ReserveRoomUpdateOne) ClearRoom() *ReserveRoomUpdateOne {
	rruo.mutation.ClearRoom()
	return rruo
}

// ClearStatus clears the status edge to StatusReserve.
func (rruo *ReserveRoomUpdateOne) ClearStatus() *ReserveRoomUpdateOne {
	rruo.mutation.ClearStatus()
	return rruo
}

// RemoveCheckinIDs removes the checkins edge to CheckIn by ids.
func (rruo *ReserveRoomUpdateOne) RemoveCheckinIDs(ids ...int) *ReserveRoomUpdateOne {
	rruo.mutation.RemoveCheckinIDs(ids...)
	return rruo
}

// RemoveCheckins removes checkins edges to CheckIn.
func (rruo *ReserveRoomUpdateOne) RemoveCheckins(c ...*CheckIn) *ReserveRoomUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rruo.RemoveCheckinIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rruo *ReserveRoomUpdateOne) Save(ctx context.Context) (*ReserveRoom, error) {
	if v, ok := rruo.mutation.Request(); ok {
		if err := reserveroom.RequestValidator(v); err != nil {
			return nil, &ValidationError{Name: "request", err: fmt.Errorf("ent: validator failed for field \"request\": %w", err)}
		}
	}
	if v, ok := rruo.mutation.Amount(); ok {
		if err := reserveroom.AmountValidator(v); err != nil {
			return nil, &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}
	if v, ok := rruo.mutation.PhoneNumber(); ok {
		if err := reserveroom.PhoneNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	if v, ok := rruo.mutation.NetPrice(); ok {
		if err := reserveroom.NetPriceValidator(v); err != nil {
			return nil, &ValidationError{Name: "net_price", err: fmt.Errorf("ent: validator failed for field \"net_price\": %w", err)}
		}
	}

	var (
		err  error
		node *ReserveRoom
	)
	if len(rruo.hooks) == 0 {
		node, err = rruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReserveRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rruo.mutation = mutation
			node, err = rruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rruo.hooks) - 1; i >= 0; i-- {
			mut = rruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *ReserveRoomUpdateOne) SaveX(ctx context.Context) *ReserveRoom {
	rr, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return rr
}

// Exec executes the query on the entity.
func (rruo *ReserveRoomUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *ReserveRoomUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rruo *ReserveRoomUpdateOne) sqlSave(ctx context.Context) (rr *ReserveRoom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reserveroom.Table,
			Columns: reserveroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reserveroom.FieldID,
			},
		},
	}
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReserveRoom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rruo.mutation.ReserveDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reserveroom.FieldReserveDate,
		})
	}
	if value, ok := rruo.mutation.Request(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reserveroom.FieldRequest,
		})
	}
	if value, ok := rruo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reserveroom.FieldAmount,
		})
	}
	if value, ok := rruo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reserveroom.FieldAmount,
		})
	}
	if value, ok := rruo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reserveroom.FieldPhoneNumber,
		})
	}
	if value, ok := rruo.mutation.NetPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reserveroom.FieldNetPrice,
		})
	}
	if value, ok := rruo.mutation.AddedNetPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: reserveroom.FieldNetPrice,
		})
	}
	if rruo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.CustomerTable,
			Columns: []string{reserveroom.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.CustomerTable,
			Columns: []string{reserveroom.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.PromotionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.PromotionTable,
			Columns: []string{reserveroom.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.PromotionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.PromotionTable,
			Columns: []string{reserveroom.PromotionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: promotion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.RoomTable,
			Columns: []string{reserveroom.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.RoomTable,
			Columns: []string{reserveroom.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dataroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.StatusTable,
			Columns: []string{reserveroom.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusreserve.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reserveroom.StatusTable,
			Columns: []string{reserveroom.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statusreserve.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := rruo.mutation.RemovedCheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reserveroom.CheckinsTable,
			Columns: []string{reserveroom.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.CheckinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   reserveroom.CheckinsTable,
			Columns: []string{reserveroom.CheckinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	rr = &ReserveRoom{config: rruo.config}
	_spec.Assign = rr.assignValues
	_spec.ScanValues = rr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reserveroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return rr, nil
}
