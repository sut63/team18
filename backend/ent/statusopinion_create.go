// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team18/app/ent/checkout"
	"github.com/team18/app/ent/statusopinion"
)

// StatusOpinionCreate is the builder for creating a StatusOpinion entity.
type StatusOpinionCreate struct {
	config
	mutation *StatusOpinionMutation
	hooks    []Hook
}

// SetOpinion sets the opinion field.
func (soc *StatusOpinionCreate) SetOpinion(s string) *StatusOpinionCreate {
	soc.mutation.SetOpinion(s)
	return soc
}

// AddCheckoutIDs adds the checkouts edge to Checkout by ids.
func (soc *StatusOpinionCreate) AddCheckoutIDs(ids ...int) *StatusOpinionCreate {
	soc.mutation.AddCheckoutIDs(ids...)
	return soc
}

// AddCheckouts adds the checkouts edges to Checkout.
func (soc *StatusOpinionCreate) AddCheckouts(c ...*Checkout) *StatusOpinionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return soc.AddCheckoutIDs(ids...)
}

// Mutation returns the StatusOpinionMutation object of the builder.
func (soc *StatusOpinionCreate) Mutation() *StatusOpinionMutation {
	return soc.mutation
}

// Save creates the StatusOpinion in the database.
func (soc *StatusOpinionCreate) Save(ctx context.Context) (*StatusOpinion, error) {
	if _, ok := soc.mutation.Opinion(); !ok {
		return nil, &ValidationError{Name: "opinion", err: errors.New("ent: missing required field \"opinion\"")}
	}
	if v, ok := soc.mutation.Opinion(); ok {
		if err := statusopinion.OpinionValidator(v); err != nil {
			return nil, &ValidationError{Name: "opinion", err: fmt.Errorf("ent: validator failed for field \"opinion\": %w", err)}
		}
	}
	var (
		err  error
		node *StatusOpinion
	)
	if len(soc.hooks) == 0 {
		node, err = soc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusOpinionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			soc.mutation = mutation
			node, err = soc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(soc.hooks) - 1; i >= 0; i-- {
			mut = soc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, soc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (soc *StatusOpinionCreate) SaveX(ctx context.Context) *StatusOpinion {
	v, err := soc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (soc *StatusOpinionCreate) sqlSave(ctx context.Context) (*StatusOpinion, error) {
	so, _spec := soc.createSpec()
	if err := sqlgraph.CreateNode(ctx, soc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	so.ID = int(id)
	return so, nil
}

func (soc *StatusOpinionCreate) createSpec() (*StatusOpinion, *sqlgraph.CreateSpec) {
	var (
		so    = &StatusOpinion{config: soc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statusopinion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statusopinion.FieldID,
			},
		}
	)
	if value, ok := soc.mutation.Opinion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statusopinion.FieldOpinion,
		})
		so.Opinion = value
	}
	if nodes := soc.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statusopinion.CheckoutsTable,
			Columns: []string{statusopinion.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return so, _spec
}
