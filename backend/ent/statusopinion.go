// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team18/app/ent/statusopinion"
)

// StatusOpinion is the model entity for the StatusOpinion schema.
type StatusOpinion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Opinion holds the value of the "opinion" field.
	Opinion string `json:"opinion,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusOpinionQuery when eager-loading is set.
	Edges StatusOpinionEdges `json:"edges"`
}

// StatusOpinionEdges holds the relations/edges for other nodes in the graph.
type StatusOpinionEdges struct {
	// Checkouts holds the value of the checkouts edge.
	Checkouts []*Checkout
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CheckoutsOrErr returns the Checkouts value or an error if the edge
// was not loaded in eager-loading.
func (e StatusOpinionEdges) CheckoutsOrErr() ([]*Checkout, error) {
	if e.loadedTypes[0] {
		return e.Checkouts, nil
	}
	return nil, &NotLoadedError{edge: "checkouts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatusOpinion) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // opinion
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatusOpinion fields.
func (so *StatusOpinion) assignValues(values ...interface{}) error {
	if m, n := len(values), len(statusopinion.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	so.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field opinion", values[0])
	} else if value.Valid {
		so.Opinion = value.String
	}
	return nil
}

// QueryCheckouts queries the checkouts edge of the StatusOpinion.
func (so *StatusOpinion) QueryCheckouts() *CheckoutQuery {
	return (&StatusOpinionClient{config: so.config}).QueryCheckouts(so)
}

// Update returns a builder for updating this StatusOpinion.
// Note that, you need to call StatusOpinion.Unwrap() before calling this method, if this StatusOpinion
// was returned from a transaction, and the transaction was committed or rolled back.
func (so *StatusOpinion) Update() *StatusOpinionUpdateOne {
	return (&StatusOpinionClient{config: so.config}).UpdateOne(so)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (so *StatusOpinion) Unwrap() *StatusOpinion {
	tx, ok := so.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatusOpinion is not a transactional entity")
	}
	so.config.driver = tx.drv
	return so
}

// String implements the fmt.Stringer.
func (so *StatusOpinion) String() string {
	var builder strings.Builder
	builder.WriteString("StatusOpinion(")
	builder.WriteString(fmt.Sprintf("id=%v", so.ID))
	builder.WriteString(", opinion=")
	builder.WriteString(so.Opinion)
	builder.WriteByte(')')
	return builder.String()
}

// StatusOpinions is a parsable slice of StatusOpinion.
type StatusOpinions []*StatusOpinion

func (so StatusOpinions) config(cfg config) {
	for _i := range so {
		so[_i].config = cfg
	}
}
