/* tslint:disable */
/* eslint-disable */
/**
 * SUT SE Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntCounterStaff,
    EntCounterStaffFromJSON,
    EntCounterStaffFromJSONTyped,
    EntCounterStaffToJSON,
    EntDataRoom,
    EntDataRoomFromJSON,
    EntDataRoomFromJSONTyped,
    EntDataRoomToJSON,
    EntFixRoom,
    EntFixRoomFromJSON,
    EntFixRoomFromJSONTyped,
    EntFixRoomToJSON,
    EntFurniture,
    EntFurnitureFromJSON,
    EntFurnitureFromJSONTyped,
    EntFurnitureToJSON,
    EntFurnitureType,
    EntFurnitureTypeFromJSON,
    EntFurnitureTypeFromJSONTyped,
    EntFurnitureTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface EntFurnitureDetailEdges
 */
export interface EntFurnitureDetailEdges {
    /**
     * 
     * @type {EntCounterStaff}
     * @memberof EntFurnitureDetailEdges
     */
    counterstaffs?: EntCounterStaff;
    /**
     * Fixs holds the value of the fixs edge.
     * @type {Array<EntFixRoom>}
     * @memberof EntFurnitureDetailEdges
     */
    fixs?: Array<EntFixRoom>;
    /**
     * 
     * @type {EntFurniture}
     * @memberof EntFurnitureDetailEdges
     */
    furnitures?: EntFurniture;
    /**
     * 
     * @type {EntDataRoom}
     * @memberof EntFurnitureDetailEdges
     */
    rooms?: EntDataRoom;
    /**
     * 
     * @type {EntFurnitureType}
     * @memberof EntFurnitureDetailEdges
     */
    types?: EntFurnitureType;
}

export function EntFurnitureDetailEdgesFromJSON(json: any): EntFurnitureDetailEdges {
    return EntFurnitureDetailEdgesFromJSONTyped(json, false);
}

export function EntFurnitureDetailEdgesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntFurnitureDetailEdges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'counterstaffs': !exists(json, 'counterstaffs') ? undefined : EntCounterStaffFromJSON(json['counterstaffs']),
        'fixs': !exists(json, 'fixs') ? undefined : ((json['fixs'] as Array<any>).map(EntFixRoomFromJSON)),
        'furnitures': !exists(json, 'furnitures') ? undefined : EntFurnitureFromJSON(json['furnitures']),
        'rooms': !exists(json, 'rooms') ? undefined : EntDataRoomFromJSON(json['rooms']),
        'types': !exists(json, 'types') ? undefined : EntFurnitureTypeFromJSON(json['types']),
    };
}

export function EntFurnitureDetailEdgesToJSON(value?: EntFurnitureDetailEdges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'counterstaffs': EntCounterStaffToJSON(value.counterstaffs),
        'fixs': value.fixs === undefined ? undefined : ((value.fixs as Array<any>).map(EntFixRoomToJSON)),
        'furnitures': EntFurnitureToJSON(value.furnitures),
        'rooms': EntDataRoomToJSON(value.rooms),
        'types': EntFurnitureTypeToJSON(value.types),
    };
}


