/* tslint:disable */
/* eslint-disable */
/**
 * SUT SE Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntCheckIn,
    EntCheckInFromJSON,
    EntCheckInToJSON,
    EntCheckout,
    EntCheckoutFromJSON,
    EntCheckoutToJSON,
    EntCounterStaff,
    EntCounterStaffFromJSON,
    EntCounterStaffToJSON,
    EntCustomer,
    EntCustomerFromJSON,
    EntCustomerToJSON,
    EntDataRoom,
    EntDataRoomFromJSON,
    EntDataRoomToJSON,
    EntFixRoom,
    EntFixRoomFromJSON,
    EntFixRoomToJSON,
    EntFurniture,
    EntFurnitureFromJSON,
    EntFurnitureToJSON,
    EntFurnitureDetail,
    EntFurnitureDetailFromJSON,
    EntFurnitureDetailToJSON,
    EntFurnitureType,
    EntFurnitureTypeFromJSON,
    EntFurnitureTypeToJSON,
    EntPromotion,
    EntPromotionFromJSON,
    EntPromotionToJSON,
    EntReserveRoom,
    EntReserveRoomFromJSON,
    EntReserveRoomToJSON,
    EntStatus,
    EntStatusFromJSON,
    EntStatusToJSON,
    EntStatusCheckIn,
    EntStatusCheckInFromJSON,
    EntStatusCheckInToJSON,
    EntStatusOpinion,
    EntStatusOpinionFromJSON,
    EntStatusOpinionToJSON,
    EntStatusReserve,
    EntStatusReserveFromJSON,
    EntStatusReserveToJSON,
    EntStatusRoom,
    EntStatusRoomFromJSON,
    EntStatusRoomToJSON,
    EntTypeRoom,
    EntTypeRoomFromJSON,
    EntTypeRoomToJSON,
} from '../models';

export interface CreateCheckinRequest {
    checkin: EntCheckIn;
}

export interface CreateCheckoutRequest {
    checkout: EntCheckout;
}

export interface CreateCounterStaffRequest {
    counterStaff: EntCounterStaff;
}

export interface CreateDataroomRequest {
    dataroom: EntDataRoom;
}

export interface CreateFixroomRequest {
    fixroom: EntFixRoom;
}

export interface CreateFurnituredetailRequest {
    furnituredetail: EntFurnitureDetail;
}

export interface CreatePromotionRequest {
    promotion: EntPromotion;
}

export interface CreateReserveRoomRequest {
    reserveRoom: EntReserveRoom;
}

export interface CreateStatusRequest {
    status: EntStatus;
}

export interface CreateStatusReserveRequest {
    statusReserve: EntStatus;
}

export interface CreateStatuscheckinRequest {
    statuscheckin: EntStatus;
}

export interface CreateStatusopinionRequest {
    statusopinion: EntStatusOpinion;
}

export interface CreateStatusroomRequest {
    statusroom: EntStatusRoom;
}

export interface CreateTyperoomRequest {
    typeroom: EntTypeRoom;
}

export interface DeleteCheckinRequest {
    id: number;
}

export interface DeleteCheckoutRequest {
    id: number;
}

export interface DeleteCounterStaffRequest {
    id: number;
}

export interface DeleteFixroomRequest {
    id: number;
}

export interface DeleteReserveRoomRequest {
    id: number;
}

export interface DeleteStatusRequest {
    id: number;
}

export interface DeleteStatusReserveRequest {
    id: number;
}

export interface DeleteStatuscheckinRequest {
    id: number;
}

export interface DeleteStatusopinionRequest {
    id: number;
}

export interface GetCheckinRequest {
    id: number;
}

export interface GetCheckoutRequest {
    id: number;
}

export interface GetCounterStaffRequest {
    id: number;
}

export interface GetCustomerRequest {
    id: number;
}

export interface GetDataroomRequest {
    id: number;
}

export interface GetDataroomcustomerRequest {
    id: number;
}

export interface GetFixRoomDataRoomRequest {
    id: number;
}

export interface GetFixroomRequest {
    id: number;
}

export interface GetFurnitureRequest {
    id: number;
}

export interface GetFurnituredetailRequest {
    id: number;
}

export interface GetFurnituretypeRequest {
    id: number;
}

export interface GetGetCheckout2Request {
    id: number;
}

export interface GetPromotionRequest {
    id: number;
}

export interface GetReserveRoomRequest {
    id: number;
}

export interface GetReserveRoomCustomerRequest {
    id: number;
}

export interface GetStatusRequest {
    id: number;
}

export interface GetStatusReserveRequest {
    id: number;
}

export interface GetStatuscheckinRequest {
    id: number;
}

export interface GetStatusopinionRequest {
    id: number;
}

export interface GetStatusroomRequest {
    id: number;
}

export interface GetTyperoomRequest {
    id: number;
}

export interface ListCheckinRequest {
    limit?: number;
    offset?: number;
}

export interface ListCheckoutRequest {
    limit?: number;
    offset?: number;
}

export interface ListCounterStaffRequest {
    limit?: number;
    offset?: number;
}

export interface ListCustomerRequest {
    limit?: number;
    offset?: number;
}

export interface ListDataRoomPromoRequest {
    id: number;
    limit?: number;
    offset?: number;
}

export interface ListDataroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListFixroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListFurnitureRequest {
    limit?: number;
    offset?: number;
}

export interface ListFurnitureDetailRoomRequest {
    id: number;
    limit?: number;
    offset?: number;
}

export interface ListFurnituredetailRequest {
    limit?: number;
    offset?: number;
}

export interface ListFurnituretypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListPromotionRequest {
    limit?: number;
    offset?: number;
}

export interface ListReserveRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusReserveRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatuscheckinRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusopinionRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatusroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListTyperoomRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateCheckinRequest {
    id: number;
    checkin: EntCheckIn;
}

export interface UpdateCounterStaffRequest {
    id: number;
    counterStaff: EntCounterStaff;
}

export interface UpdateDataroomRequest {
    id: number;
    dataroom: EntDataRoom;
}

export interface UpdateReserveRoomRequest {
    id: number;
    reserveRoom: EntReserveRoom;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create checkin
     * Create checkin
     */
    async createCheckinRaw(requestParameters: CreateCheckinRequest): Promise<runtime.ApiResponse<EntCheckIn>> {
        if (requestParameters.checkin === null || requestParameters.checkin === undefined) {
            throw new runtime.RequiredError('checkin','Required parameter requestParameters.checkin was null or undefined when calling createCheckin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checkins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCheckInToJSON(requestParameters.checkin),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCheckInFromJSON(jsonValue));
    }

    /**
     * Create checkin
     * Create checkin
     */
    async createCheckin(requestParameters: CreateCheckinRequest): Promise<EntCheckIn> {
        const response = await this.createCheckinRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create checkout
     * Create checkout
     */
    async createCheckoutRaw(requestParameters: CreateCheckoutRequest): Promise<runtime.ApiResponse<EntCheckout>> {
        if (requestParameters.checkout === null || requestParameters.checkout === undefined) {
            throw new runtime.RequiredError('checkout','Required parameter requestParameters.checkout was null or undefined when calling createCheckout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checkouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCheckoutToJSON(requestParameters.checkout),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCheckoutFromJSON(jsonValue));
    }

    /**
     * Create checkout
     * Create checkout
     */
    async createCheckout(requestParameters: CreateCheckoutRequest): Promise<EntCheckout> {
        const response = await this.createCheckoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create CounterStaff
     * Create CounterStaff
     */
    async createCounterStaffRaw(requestParameters: CreateCounterStaffRequest): Promise<runtime.ApiResponse<EntCounterStaff>> {
        if (requestParameters.counterStaff === null || requestParameters.counterStaff === undefined) {
            throw new runtime.RequiredError('counterStaff','Required parameter requestParameters.counterStaff was null or undefined when calling createCounterStaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/CounterStaffs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCounterStaffToJSON(requestParameters.counterStaff),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCounterStaffFromJSON(jsonValue));
    }

    /**
     * Create CounterStaff
     * Create CounterStaff
     */
    async createCounterStaff(requestParameters: CreateCounterStaffRequest): Promise<EntCounterStaff> {
        const response = await this.createCounterStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create dataroom
     * Create dataroom
     */
    async createDataroomRaw(requestParameters: CreateDataroomRequest): Promise<runtime.ApiResponse<EntDataRoom>> {
        if (requestParameters.dataroom === null || requestParameters.dataroom === undefined) {
            throw new runtime.RequiredError('dataroom','Required parameter requestParameters.dataroom was null or undefined when calling createDataroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datarooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDataRoomToJSON(requestParameters.dataroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDataRoomFromJSON(jsonValue));
    }

    /**
     * Create dataroom
     * Create dataroom
     */
    async createDataroom(requestParameters: CreateDataroomRequest): Promise<EntDataRoom> {
        const response = await this.createDataroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create fixroom
     * Create fixroom
     */
    async createFixroomRaw(requestParameters: CreateFixroomRequest): Promise<runtime.ApiResponse<EntFixRoom>> {
        if (requestParameters.fixroom === null || requestParameters.fixroom === undefined) {
            throw new runtime.RequiredError('fixroom','Required parameter requestParameters.fixroom was null or undefined when calling createFixroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fixrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFixRoomToJSON(requestParameters.fixroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFixRoomFromJSON(jsonValue));
    }

    /**
     * Create fixroom
     * Create fixroom
     */
    async createFixroom(requestParameters: CreateFixroomRequest): Promise<EntFixRoom> {
        const response = await this.createFixroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create furnituredetail
     * Create furnituredetail
     */
    async createFurnituredetailRaw(requestParameters: CreateFurnituredetailRequest): Promise<runtime.ApiResponse<EntFurnitureDetail>> {
        if (requestParameters.furnituredetail === null || requestParameters.furnituredetail === undefined) {
            throw new runtime.RequiredError('furnituredetail','Required parameter requestParameters.furnituredetail was null or undefined when calling createFurnituredetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/furnituredetails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFurnitureDetailToJSON(requestParameters.furnituredetail),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFurnitureDetailFromJSON(jsonValue));
    }

    /**
     * Create furnituredetail
     * Create furnituredetail
     */
    async createFurnituredetail(requestParameters: CreateFurnituredetailRequest): Promise<EntFurnitureDetail> {
        const response = await this.createFurnituredetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create promotion
     * Create promotion
     */
    async createPromotionRaw(requestParameters: CreatePromotionRequest): Promise<runtime.ApiResponse<EntPromotion>> {
        if (requestParameters.promotion === null || requestParameters.promotion === undefined) {
            throw new runtime.RequiredError('promotion','Required parameter requestParameters.promotion was null or undefined when calling createPromotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/promotions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPromotionToJSON(requestParameters.promotion),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPromotionFromJSON(jsonValue));
    }

    /**
     * Create promotion
     * Create promotion
     */
    async createPromotion(requestParameters: CreatePromotionRequest): Promise<EntPromotion> {
        const response = await this.createPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create ReserveRoom
     * Create ReserveRoom
     */
    async createReserveRoomRaw(requestParameters: CreateReserveRoomRequest): Promise<runtime.ApiResponse<EntReserveRoom>> {
        if (requestParameters.reserveRoom === null || requestParameters.reserveRoom === undefined) {
            throw new runtime.RequiredError('reserveRoom','Required parameter requestParameters.reserveRoom was null or undefined when calling createReserveRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ReserveRooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntReserveRoomToJSON(requestParameters.reserveRoom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntReserveRoomFromJSON(jsonValue));
    }

    /**
     * Create ReserveRoom
     * Create ReserveRoom
     */
    async createReserveRoom(requestParameters: CreateReserveRoomRequest): Promise<EntReserveRoom> {
        const response = await this.createReserveRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create status
     * Create status
     */
    async createStatusRaw(requestParameters: CreateStatusRequest): Promise<runtime.ApiResponse<EntStatus>> {
        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling createStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statuss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusToJSON(requestParameters.status),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusFromJSON(jsonValue));
    }

    /**
     * Create status
     * Create status
     */
    async createStatus(requestParameters: CreateStatusRequest): Promise<EntStatus> {
        const response = await this.createStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statusReserve
     * Create statusReserve
     */
    async createStatusReserveRaw(requestParameters: CreateStatusReserveRequest): Promise<runtime.ApiResponse<EntStatusReserve>> {
        if (requestParameters.statusReserve === null || requestParameters.statusReserve === undefined) {
            throw new runtime.RequiredError('statusReserve','Required parameter requestParameters.statusReserve was null or undefined when calling createStatusReserve.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statusReserves`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusToJSON(requestParameters.statusReserve),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusReserveFromJSON(jsonValue));
    }

    /**
     * Create statusReserve
     * Create statusReserve
     */
    async createStatusReserve(requestParameters: CreateStatusReserveRequest): Promise<EntStatusReserve> {
        const response = await this.createStatusReserveRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statuscheckin
     * Create statuscheckin
     */
    async createStatuscheckinRaw(requestParameters: CreateStatuscheckinRequest): Promise<runtime.ApiResponse<EntStatusCheckIn>> {
        if (requestParameters.statuscheckin === null || requestParameters.statuscheckin === undefined) {
            throw new runtime.RequiredError('statuscheckin','Required parameter requestParameters.statuscheckin was null or undefined when calling createStatuscheckin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statuscheckins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusToJSON(requestParameters.statuscheckin),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusCheckInFromJSON(jsonValue));
    }

    /**
     * Create statuscheckin
     * Create statuscheckin
     */
    async createStatuscheckin(requestParameters: CreateStatuscheckinRequest): Promise<EntStatusCheckIn> {
        const response = await this.createStatuscheckinRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statusopinion
     * Create statusopinion
     */
    async createStatusopinionRaw(requestParameters: CreateStatusopinionRequest): Promise<runtime.ApiResponse<EntStatusOpinion>> {
        if (requestParameters.statusopinion === null || requestParameters.statusopinion === undefined) {
            throw new runtime.RequiredError('statusopinion','Required parameter requestParameters.statusopinion was null or undefined when calling createStatusopinion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statusopinions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusOpinionToJSON(requestParameters.statusopinion),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusOpinionFromJSON(jsonValue));
    }

    /**
     * Create statusopinion
     * Create statusopinion
     */
    async createStatusopinion(requestParameters: CreateStatusopinionRequest): Promise<EntStatusOpinion> {
        const response = await this.createStatusopinionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statusroom
     * Create statusroom
     */
    async createStatusroomRaw(requestParameters: CreateStatusroomRequest): Promise<runtime.ApiResponse<EntStatusRoom>> {
        if (requestParameters.statusroom === null || requestParameters.statusroom === undefined) {
            throw new runtime.RequiredError('statusroom','Required parameter requestParameters.statusroom was null or undefined when calling createStatusroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statusrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatusRoomToJSON(requestParameters.statusroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusRoomFromJSON(jsonValue));
    }

    /**
     * Create statusroom
     * Create statusroom
     */
    async createStatusroom(requestParameters: CreateStatusroomRequest): Promise<EntStatusRoom> {
        const response = await this.createStatusroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create typeroom
     * Create typeroom
     */
    async createTyperoomRaw(requestParameters: CreateTyperoomRequest): Promise<runtime.ApiResponse<EntTypeRoom>> {
        if (requestParameters.typeroom === null || requestParameters.typeroom === undefined) {
            throw new runtime.RequiredError('typeroom','Required parameter requestParameters.typeroom was null or undefined when calling createTyperoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/typerooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTypeRoomToJSON(requestParameters.typeroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeRoomFromJSON(jsonValue));
    }

    /**
     * Create typeroom
     * Create typeroom
     */
    async createTyperoom(requestParameters: CreateTyperoomRequest): Promise<EntTypeRoom> {
        const response = await this.createTyperoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get checkin by ID
     * Delete a checkin entity by ID
     */
    async deleteCheckinRaw(requestParameters: DeleteCheckinRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get checkin by ID
     * Delete a checkin entity by ID
     */
    async deleteCheckin(requestParameters: DeleteCheckinRequest): Promise<object> {
        const response = await this.deleteCheckinRaw(requestParameters);
        return await response.value();
    }

    /**
     * get checkout by ID
     * Delete a checkout entity by ID
     */
    async deleteCheckoutRaw(requestParameters: DeleteCheckoutRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCheckout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get checkout by ID
     * Delete a checkout entity by ID
     */
    async deleteCheckout(requestParameters: DeleteCheckoutRequest): Promise<object> {
        const response = await this.deleteCheckoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * get CounterStaff by ID
     * Delete a CounterStaff entity by ID
     */
    async deleteCounterStaffRaw(requestParameters: DeleteCounterStaffRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCounterStaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CounterStaffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get CounterStaff by ID
     * Delete a CounterStaff entity by ID
     */
    async deleteCounterStaff(requestParameters: DeleteCounterStaffRequest): Promise<object> {
        const response = await this.deleteCounterStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fixroom by ID
     * Delete a fixroom entity by ID
     */
    async deleteFixroomRaw(requestParameters: DeleteFixroomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFixroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get fixroom by ID
     * Delete a fixroom entity by ID
     */
    async deleteFixroom(requestParameters: DeleteFixroomRequest): Promise<object> {
        const response = await this.deleteFixroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get ReserveRoom by ID
     * Delete a ReserveRoom entity by ID
     */
    async deleteReserveRoomRaw(requestParameters: DeleteReserveRoomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteReserveRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ReserveRooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get ReserveRoom by ID
     * Delete a ReserveRoom entity by ID
     */
    async deleteReserveRoom(requestParameters: DeleteReserveRoomRequest): Promise<object> {
        const response = await this.deleteReserveRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get status by ID
     * Delete a status entity by ID
     */
    async deleteStatusRaw(requestParameters: DeleteStatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get status by ID
     * Delete a status entity by ID
     */
    async deleteStatus(requestParameters: DeleteStatusRequest): Promise<object> {
        const response = await this.deleteStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusReserve by ID
     * Delete a statusReserve entity by ID
     */
    async deleteStatusReserveRaw(requestParameters: DeleteStatusReserveRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatusReserve.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusReserves/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statusReserve by ID
     * Delete a statusReserve entity by ID
     */
    async deleteStatusReserve(requestParameters: DeleteStatusReserveRequest): Promise<object> {
        const response = await this.deleteStatusReserveRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statuscheckin by ID
     * Delete a statuscheckin entity by ID
     */
    async deleteStatuscheckinRaw(requestParameters: DeleteStatuscheckinRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatuscheckin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuscheckins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statuscheckin by ID
     * Delete a statuscheckin entity by ID
     */
    async deleteStatuscheckin(requestParameters: DeleteStatuscheckinRequest): Promise<object> {
        const response = await this.deleteStatuscheckinRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusopinion by ID
     * Delete a statusopinion entity by ID
     */
    async deleteStatusopinionRaw(requestParameters: DeleteStatusopinionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatusopinion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusopinions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statusopinion by ID
     * Delete a statusopinion entity by ID
     */
    async deleteStatusopinion(requestParameters: DeleteStatusopinionRequest): Promise<object> {
        const response = await this.deleteStatusopinionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get checkin by ID
     * Get a checkin entity by ID
     */
    async getCheckinRaw(requestParameters: GetCheckinRequest): Promise<runtime.ApiResponse<Array<EntCheckIn>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCheckInFromJSON));
    }

    /**
     * get checkin by ID
     * Get a checkin entity by ID
     */
    async getCheckin(requestParameters: GetCheckinRequest): Promise<Array<EntCheckIn>> {
        const response = await this.getCheckinRaw(requestParameters);
        return await response.value();
    }

    /**
     * get checkout by ID
     * Get a checkout entity by ID
     */
    async getCheckoutRaw(requestParameters: GetCheckoutRequest): Promise<runtime.ApiResponse<EntCheckout>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCheckout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCheckoutFromJSON(jsonValue));
    }

    /**
     * get checkout by ID
     * Get a checkout entity by ID
     */
    async getCheckout(requestParameters: GetCheckoutRequest): Promise<EntCheckout> {
        const response = await this.getCheckoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * get CounterStaff by ID
     * Get a CounterStaff entity by ID
     */
    async getCounterStaffRaw(requestParameters: GetCounterStaffRequest): Promise<runtime.ApiResponse<EntCounterStaff>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCounterStaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CounterStaffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCounterStaffFromJSON(jsonValue));
    }

    /**
     * get CounterStaff by ID
     * Get a CounterStaff entity by ID
     */
    async getCounterStaff(requestParameters: GetCounterStaffRequest): Promise<EntCounterStaff> {
        const response = await this.getCounterStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Customer by ID
     * Get a Customer entity by ID
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest): Promise<runtime.ApiResponse<EntCustomer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCustomerFromJSON(jsonValue));
    }

    /**
     * get Customer by ID
     * Get a Customer entity by ID
     */
    async getCustomer(requestParameters: GetCustomerRequest): Promise<EntCustomer> {
        const response = await this.getCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get dataroom by ID
     * Get a dataroom entity by ID
     */
    async getDataroomRaw(requestParameters: GetDataroomRequest): Promise<runtime.ApiResponse<Array<EntDataRoom>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDataroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/datarooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDataRoomFromJSON));
    }

    /**
     * get dataroom by ID
     * Get a dataroom entity by ID
     */
    async getDataroom(requestParameters: GetDataroomRequest): Promise<Array<EntDataRoom>> {
        const response = await this.getDataroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get dataroomcustomer by ID
     * Get a dataroomcustomer entity by ID
     */
    async getDataroomcustomerRaw(requestParameters: GetDataroomcustomerRequest): Promise<runtime.ApiResponse<EntDataRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDataroomcustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dataroomcustomer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDataRoomFromJSON(jsonValue));
    }

    /**
     * get dataroomcustomer by ID
     * Get a dataroomcustomer entity by ID
     */
    async getDataroomcustomer(requestParameters: GetDataroomcustomerRequest): Promise<EntDataRoom> {
        const response = await this.getDataroomcustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get FixRoomDataRoom by ID
     * Get a FixRoomDataRoom entity by ID
     */
    async getFixRoomDataRoomRaw(requestParameters: GetFixRoomDataRoomRequest): Promise<runtime.ApiResponse<Array<EntFixRoom>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFixRoomDataRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/FixRoomDataRoom/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFixRoomFromJSON));
    }

    /**
     * get FixRoomDataRoom by ID
     * Get a FixRoomDataRoom entity by ID
     */
    async getFixRoomDataRoom(requestParameters: GetFixRoomDataRoomRequest): Promise<Array<EntFixRoom>> {
        const response = await this.getFixRoomDataRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get fixroom by ID
     * Get a fixroom entity by ID
     */
    async getFixroomRaw(requestParameters: GetFixroomRequest): Promise<runtime.ApiResponse<EntFixRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFixroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFixRoomFromJSON(jsonValue));
    }

    /**
     * get fixroom by ID
     * Get a fixroom entity by ID
     */
    async getFixroom(requestParameters: GetFixroomRequest): Promise<EntFixRoom> {
        const response = await this.getFixroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get furniture by ID
     * Get a furniture entity by ID
     */
    async getFurnitureRaw(requestParameters: GetFurnitureRequest): Promise<runtime.ApiResponse<EntFurniture>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFurniture.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/furnitures/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFurnitureFromJSON(jsonValue));
    }

    /**
     * get furniture by ID
     * Get a furniture entity by ID
     */
    async getFurniture(requestParameters: GetFurnitureRequest): Promise<EntFurniture> {
        const response = await this.getFurnitureRaw(requestParameters);
        return await response.value();
    }

    /**
     * get furnituredetail by ID
     * Get a furnituredetail entity by ID
     */
    async getFurnituredetailRaw(requestParameters: GetFurnituredetailRequest): Promise<runtime.ApiResponse<EntFurnitureDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFurnituredetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/furnituredetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFurnitureDetailFromJSON(jsonValue));
    }

    /**
     * get furnituredetail by ID
     * Get a furnituredetail entity by ID
     */
    async getFurnituredetail(requestParameters: GetFurnituredetailRequest): Promise<EntFurnitureDetail> {
        const response = await this.getFurnituredetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * get furnituretype by ID
     * Get a furnituretype entity by ID
     */
    async getFurnituretypeRaw(requestParameters: GetFurnituretypeRequest): Promise<runtime.ApiResponse<EntFurnitureType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFurnituretype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/furnituretypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFurnitureTypeFromJSON(jsonValue));
    }

    /**
     * get furnituretype by ID
     * Get a furnituretype entity by ID
     */
    async getFurnituretype(requestParameters: GetFurnituretypeRequest): Promise<EntFurnitureType> {
        const response = await this.getFurnituretypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get GetCheckout2 by ID
     * Get a GetCheckout2 entity by ID
     */
    async getGetCheckout2Raw(requestParameters: GetGetCheckout2Request): Promise<runtime.ApiResponse<EntReserveRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGetCheckout2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkouts2/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntReserveRoomFromJSON(jsonValue));
    }

    /**
     * get GetCheckout2 by ID
     * Get a GetCheckout2 entity by ID
     */
    async getGetCheckout2(requestParameters: GetGetCheckout2Request): Promise<EntReserveRoom> {
        const response = await this.getGetCheckout2Raw(requestParameters);
        return await response.value();
    }

    /**
     * get promotion by ID
     * Get a promotion entity by ID
     */
    async getPromotionRaw(requestParameters: GetPromotionRequest): Promise<runtime.ApiResponse<EntPromotion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPromotion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPromotionFromJSON(jsonValue));
    }

    /**
     * get promotion by ID
     * Get a promotion entity by ID
     */
    async getPromotion(requestParameters: GetPromotionRequest): Promise<EntPromotion> {
        const response = await this.getPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get ReserveRoom by ID
     * Get a ReserveRoom entity by ID
     */
    async getReserveRoomRaw(requestParameters: GetReserveRoomRequest): Promise<runtime.ApiResponse<EntReserveRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReserveRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ReserveRooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntReserveRoomFromJSON(jsonValue));
    }

    /**
     * get ReserveRoom by ID
     * Get a ReserveRoom entity by ID
     */
    async getReserveRoom(requestParameters: GetReserveRoomRequest): Promise<EntReserveRoom> {
        const response = await this.getReserveRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get ReserveRoomCustomer by ID
     * Get a ReserveRoomCustomer entity by ID
     */
    async getReserveRoomCustomerRaw(requestParameters: GetReserveRoomCustomerRequest): Promise<runtime.ApiResponse<Array<EntReserveRoom>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReserveRoomCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ReserveRoomsCustomer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntReserveRoomFromJSON));
    }

    /**
     * get ReserveRoomCustomer by ID
     * Get a ReserveRoomCustomer entity by ID
     */
    async getReserveRoomCustomer(requestParameters: GetReserveRoomCustomerRequest): Promise<Array<EntReserveRoom>> {
        const response = await this.getReserveRoomCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get status by ID
     * Get a status entity by ID
     */
    async getStatusRaw(requestParameters: GetStatusRequest): Promise<runtime.ApiResponse<EntStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusFromJSON(jsonValue));
    }

    /**
     * get status by ID
     * Get a status entity by ID
     */
    async getStatus(requestParameters: GetStatusRequest): Promise<EntStatus> {
        const response = await this.getStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusReserve by ID
     * Get a statusReserve entity by ID
     */
    async getStatusReserveRaw(requestParameters: GetStatusReserveRequest): Promise<runtime.ApiResponse<EntStatusReserve>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatusReserve.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusReserves/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusReserveFromJSON(jsonValue));
    }

    /**
     * get statusReserve by ID
     * Get a statusReserve entity by ID
     */
    async getStatusReserve(requestParameters: GetStatusReserveRequest): Promise<EntStatusReserve> {
        const response = await this.getStatusReserveRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statuscheckin by ID
     * Get a statuscheckin entity by ID
     */
    async getStatuscheckinRaw(requestParameters: GetStatuscheckinRequest): Promise<runtime.ApiResponse<EntStatusCheckIn>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatuscheckin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuscheckins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusCheckInFromJSON(jsonValue));
    }

    /**
     * get statuscheckin by ID
     * Get a statuscheckin entity by ID
     */
    async getStatuscheckin(requestParameters: GetStatuscheckinRequest): Promise<EntStatusCheckIn> {
        const response = await this.getStatuscheckinRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusopinion by ID
     * Get a statusopinion entity by ID
     */
    async getStatusopinionRaw(requestParameters: GetStatusopinionRequest): Promise<runtime.ApiResponse<EntStatusOpinion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatusopinion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusopinions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusOpinionFromJSON(jsonValue));
    }

    /**
     * get statusopinion by ID
     * Get a statusopinion entity by ID
     */
    async getStatusopinion(requestParameters: GetStatusopinionRequest): Promise<EntStatusOpinion> {
        const response = await this.getStatusopinionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statusroom by ID
     * Get a statusroom entity by ID
     */
    async getStatusroomRaw(requestParameters: GetStatusroomRequest): Promise<runtime.ApiResponse<EntStatusRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatusroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatusRoomFromJSON(jsonValue));
    }

    /**
     * get statusroom by ID
     * Get a statusroom entity by ID
     */
    async getStatusroom(requestParameters: GetStatusroomRequest): Promise<EntStatusRoom> {
        const response = await this.getStatusroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get typeroom by ID
     * Get a typeroom entity by ID
     */
    async getTyperoomRaw(requestParameters: GetTyperoomRequest): Promise<runtime.ApiResponse<EntTypeRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTyperoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typerooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTypeRoomFromJSON(jsonValue));
    }

    /**
     * get typeroom by ID
     * Get a typeroom entity by ID
     */
    async getTyperoom(requestParameters: GetTyperoomRequest): Promise<EntTypeRoom> {
        const response = await this.getTyperoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list checkin entities
     * List checkin entities
     */
    async listCheckinRaw(requestParameters: ListCheckinRequest): Promise<runtime.ApiResponse<Array<EntCheckIn>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCheckInFromJSON));
    }

    /**
     * list checkin entities
     * List checkin entities
     */
    async listCheckin(requestParameters: ListCheckinRequest): Promise<Array<EntCheckIn>> {
        const response = await this.listCheckinRaw(requestParameters);
        return await response.value();
    }

    /**
     * list checkout entities
     * List checkout entities
     */
    async listCheckoutRaw(requestParameters: ListCheckoutRequest): Promise<runtime.ApiResponse<Array<EntCheckout>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCheckoutFromJSON));
    }

    /**
     * list checkout entities
     * List checkout entities
     */
    async listCheckout(requestParameters: ListCheckoutRequest): Promise<Array<EntCheckout>> {
        const response = await this.listCheckoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * list CounterStaff entities
     * List CounterStaff entities
     */
    async listCounterStaffRaw(requestParameters: ListCounterStaffRequest): Promise<runtime.ApiResponse<Array<EntCounterStaff>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CounterStaffs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCounterStaffFromJSON));
    }

    /**
     * list CounterStaff entities
     * List CounterStaff entities
     */
    async listCounterStaff(requestParameters: ListCounterStaffRequest): Promise<Array<EntCounterStaff>> {
        const response = await this.listCounterStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Customer entities
     * List Customer entities
     */
    async listCustomerRaw(requestParameters: ListCustomerRequest): Promise<runtime.ApiResponse<Array<EntCustomer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCustomerFromJSON));
    }

    /**
     * list Customer entities
     * List Customer entities
     */
    async listCustomer(requestParameters: ListCustomerRequest): Promise<Array<EntCustomer>> {
        const response = await this.listCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * list DataRoomPromo entities by id
     * List DataRoomPromo entities by id
     */
    async listDataRoomPromoRaw(requestParameters: ListDataRoomPromoRequest): Promise<runtime.ApiResponse<Array<EntDataRoom>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listDataRoomPromo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dataroompromos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDataRoomFromJSON));
    }

    /**
     * list DataRoomPromo entities by id
     * List DataRoomPromo entities by id
     */
    async listDataRoomPromo(requestParameters: ListDataRoomPromoRequest): Promise<Array<EntDataRoom>> {
        const response = await this.listDataRoomPromoRaw(requestParameters);
        return await response.value();
    }

    /**
     * list dataroom entities
     * List dataroom entities
     */
    async listDataroomRaw(requestParameters: ListDataroomRequest): Promise<runtime.ApiResponse<Array<EntDataRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/datarooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDataRoomFromJSON));
    }

    /**
     * list dataroom entities
     * List dataroom entities
     */
    async listDataroom(requestParameters: ListDataroomRequest): Promise<Array<EntDataRoom>> {
        const response = await this.listDataroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list fixroom entities
     * List fixroom entities
     */
    async listFixroomRaw(requestParameters: ListFixroomRequest): Promise<runtime.ApiResponse<Array<EntFixRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fixrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFixRoomFromJSON));
    }

    /**
     * list fixroom entities
     * List fixroom entities
     */
    async listFixroom(requestParameters: ListFixroomRequest): Promise<Array<EntFixRoom>> {
        const response = await this.listFixroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list furniture entities
     * List furniture entities
     */
    async listFurnitureRaw(requestParameters: ListFurnitureRequest): Promise<runtime.ApiResponse<Array<EntFurniture>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/furnitures`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFurnitureFromJSON));
    }

    /**
     * list furniture entities
     * List furniture entities
     */
    async listFurniture(requestParameters: ListFurnitureRequest): Promise<Array<EntFurniture>> {
        const response = await this.listFurnitureRaw(requestParameters);
        return await response.value();
    }

    /**
     * list FurnitureDetailRoom entities
     * List FurnitureDetailRoom entities
     */
    async listFurnitureDetailRoomRaw(requestParameters: ListFurnitureDetailRoomRequest): Promise<runtime.ApiResponse<Array<EntFurnitureDetail>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listFurnitureDetailRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/FurnitureDetailRooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFurnitureDetailFromJSON));
    }

    /**
     * list FurnitureDetailRoom entities
     * List FurnitureDetailRoom entities
     */
    async listFurnitureDetailRoom(requestParameters: ListFurnitureDetailRoomRequest): Promise<Array<EntFurnitureDetail>> {
        const response = await this.listFurnitureDetailRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list furnituredetail entities
     * List furnituredetail entities
     */
    async listFurnituredetailRaw(requestParameters: ListFurnituredetailRequest): Promise<runtime.ApiResponse<Array<EntFurnitureDetail>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/furnituredetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFurnitureDetailFromJSON));
    }

    /**
     * list furnituredetail entities
     * List furnituredetail entities
     */
    async listFurnituredetail(requestParameters: ListFurnituredetailRequest): Promise<Array<EntFurnitureDetail>> {
        const response = await this.listFurnituredetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * list furnituretype entities
     * List furnituretype entities
     */
    async listFurnituretypeRaw(requestParameters: ListFurnituretypeRequest): Promise<runtime.ApiResponse<Array<EntFurnitureType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/furnituretypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFurnitureTypeFromJSON));
    }

    /**
     * list furnituretype entities
     * List furnituretype entities
     */
    async listFurnituretype(requestParameters: ListFurnituretypeRequest): Promise<Array<EntFurnitureType>> {
        const response = await this.listFurnituretypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list  GetCheckInStatus entities
     * List  GetCheckInStatus entities
     */
    async listGetCheckInStatusRaw(): Promise<runtime.ApiResponse<Array<EntCheckIn>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkinstatuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCheckInFromJSON));
    }

    /**
     * list  GetCheckInStatus entities
     * List  GetCheckInStatus entities
     */
    async listGetCheckInStatus(): Promise<Array<EntCheckIn>> {
        const response = await this.listGetCheckInStatusRaw();
        return await response.value();
    }

    /**
     * list promotion entities
     * List promotion entities
     */
    async listPromotionRaw(requestParameters: ListPromotionRequest): Promise<runtime.ApiResponse<Array<EntPromotion>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPromotionFromJSON));
    }

    /**
     * list promotion entities
     * List promotion entities
     */
    async listPromotion(requestParameters: ListPromotionRequest): Promise<Array<EntPromotion>> {
        const response = await this.listPromotionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list ReserveRoom entities
     * List ReserveRoom entities
     */
    async listReserveRoomRaw(requestParameters: ListReserveRoomRequest): Promise<runtime.ApiResponse<Array<EntReserveRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ReserveRooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntReserveRoomFromJSON));
    }

    /**
     * list ReserveRoom entities
     * List ReserveRoom entities
     */
    async listReserveRoom(requestParameters: ListReserveRoomRequest): Promise<Array<EntReserveRoom>> {
        const response = await this.listReserveRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list status entities
     * List status entities
     */
    async listStatusRaw(requestParameters: ListStatusRequest): Promise<runtime.ApiResponse<Array<EntStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusFromJSON));
    }

    /**
     * list status entities
     * List status entities
     */
    async listStatus(requestParameters: ListStatusRequest): Promise<Array<EntStatus>> {
        const response = await this.listStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statusReserve entities
     * List statusReserve entities
     */
    async listStatusReserveRaw(requestParameters: ListStatusReserveRequest): Promise<runtime.ApiResponse<Array<EntStatusReserve>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusReserves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusReserveFromJSON));
    }

    /**
     * list statusReserve entities
     * List statusReserve entities
     */
    async listStatusReserve(requestParameters: ListStatusReserveRequest): Promise<Array<EntStatusReserve>> {
        const response = await this.listStatusReserveRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statuscheckin entities
     * List statuscheckin entities
     */
    async listStatuscheckinRaw(requestParameters: ListStatuscheckinRequest): Promise<runtime.ApiResponse<Array<EntStatusCheckIn>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statuscheckins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusCheckInFromJSON));
    }

    /**
     * list statuscheckin entities
     * List statuscheckin entities
     */
    async listStatuscheckin(requestParameters: ListStatuscheckinRequest): Promise<Array<EntStatusCheckIn>> {
        const response = await this.listStatuscheckinRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statusopinion entities
     * List statusopinion entities
     */
    async listStatusopinionRaw(requestParameters: ListStatusopinionRequest): Promise<runtime.ApiResponse<Array<EntStatusOpinion>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusopinions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusOpinionFromJSON));
    }

    /**
     * list statusopinion entities
     * List statusopinion entities
     */
    async listStatusopinion(requestParameters: ListStatusopinionRequest): Promise<Array<EntStatusOpinion>> {
        const response = await this.listStatusopinionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statusroom entities
     * List statusroom entities
     */
    async listStatusroomRaw(requestParameters: ListStatusroomRequest): Promise<runtime.ApiResponse<Array<EntStatusRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statusrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatusRoomFromJSON));
    }

    /**
     * list statusroom entities
     * List statusroom entities
     */
    async listStatusroom(requestParameters: ListStatusroomRequest): Promise<Array<EntStatusRoom>> {
        const response = await this.listStatusroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list typeroom entities
     * List typeroom entities
     */
    async listTyperoomRaw(requestParameters: ListTyperoomRequest): Promise<runtime.ApiResponse<Array<EntTypeRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typerooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTypeRoomFromJSON));
    }

    /**
     * list typeroom entities
     * List typeroom entities
     */
    async listTyperoom(requestParameters: ListTyperoomRequest): Promise<Array<EntTypeRoom>> {
        const response = await this.listTyperoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Checkin by ID
     * Update a Checkin entity by ID
     */
    async updateCheckinRaw(requestParameters: UpdateCheckinRequest): Promise<runtime.ApiResponse<EntCheckIn>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCheckin.');
        }

        if (requestParameters.checkin === null || requestParameters.checkin === undefined) {
            throw new runtime.RequiredError('checkin','Required parameter requestParameters.checkin was null or undefined when calling updateCheckin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checkins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCheckInToJSON(requestParameters.checkin),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCheckInFromJSON(jsonValue));
    }

    /**
     * update Checkin by ID
     * Update a Checkin entity by ID
     */
    async updateCheckin(requestParameters: UpdateCheckinRequest): Promise<EntCheckIn> {
        const response = await this.updateCheckinRaw(requestParameters);
        return await response.value();
    }

    /**
     * update CounterStaff by ID
     * Update a CounterStaff entity by ID
     */
    async updateCounterStaffRaw(requestParameters: UpdateCounterStaffRequest): Promise<runtime.ApiResponse<EntCounterStaff>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCounterStaff.');
        }

        if (requestParameters.counterStaff === null || requestParameters.counterStaff === undefined) {
            throw new runtime.RequiredError('counterStaff','Required parameter requestParameters.counterStaff was null or undefined when calling updateCounterStaff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/CounterStaffs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCounterStaffToJSON(requestParameters.counterStaff),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCounterStaffFromJSON(jsonValue));
    }

    /**
     * update CounterStaff by ID
     * Update a CounterStaff entity by ID
     */
    async updateCounterStaff(requestParameters: UpdateCounterStaffRequest): Promise<EntCounterStaff> {
        const response = await this.updateCounterStaffRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Dataroom by ID
     * Update a Dataroom entity by ID
     */
    async updateDataroomRaw(requestParameters: UpdateDataroomRequest): Promise<runtime.ApiResponse<EntDataRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDataroom.');
        }

        if (requestParameters.dataroom === null || requestParameters.dataroom === undefined) {
            throw new runtime.RequiredError('dataroom','Required parameter requestParameters.dataroom was null or undefined when calling updateDataroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/datarooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDataRoomToJSON(requestParameters.dataroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDataRoomFromJSON(jsonValue));
    }

    /**
     * update Dataroom by ID
     * Update a Dataroom entity by ID
     */
    async updateDataroom(requestParameters: UpdateDataroomRequest): Promise<EntDataRoom> {
        const response = await this.updateDataroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update ReserveRoom by ID
     * Update a ReserveRoom entity by ID
     */
    async updateReserveRoomRaw(requestParameters: UpdateReserveRoomRequest): Promise<runtime.ApiResponse<EntReserveRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateReserveRoom.');
        }

        if (requestParameters.reserveRoom === null || requestParameters.reserveRoom === undefined) {
            throw new runtime.RequiredError('reserveRoom','Required parameter requestParameters.reserveRoom was null or undefined when calling updateReserveRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ReserveRooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntReserveRoomToJSON(requestParameters.reserveRoom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntReserveRoomFromJSON(jsonValue));
    }

    /**
     * update ReserveRoom by ID
     * Update a ReserveRoom entity by ID
     */
    async updateReserveRoom(requestParameters: UpdateReserveRoomRequest): Promise<EntReserveRoom> {
        const response = await this.updateReserveRoomRaw(requestParameters);
        return await response.value();
    }

}
